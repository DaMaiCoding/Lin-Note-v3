import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-f7181f71.js";const t={},p=e(`<h1 id="js的巧妙写法" tabindex="-1"><a class="header-anchor" href="#js的巧妙写法" aria-hidden="true">#</a> js的巧妙写法</h1><h2 id="_1-截取-数组最快的办法" tabindex="-1"><a class="header-anchor" href="#_1-截取-数组最快的办法" aria-hidden="true">#</a> 1. 截取 数组最快的办法</h2><p>通过直接设置, 数组长度即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [1, 2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-字符类型-转-数字类型" tabindex="-1"><a class="header-anchor" href="#_2-字符类型-转-数字类型" aria-hidden="true">#</a> 2. 字符类型 转 数字类型</h2><p>使用 <code>+</code> 能巧妙实现 <strong>字符类型</strong> 转 <strong>数字类型</strong></p><p>不仅可以转换 <strong>整数</strong>, 还是可以转换 <strong>浮点数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token string">&#39;236&#39;</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token string">&#39;23&#39;</span>
<span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token string">&#39;1.32&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2 <span class="token operator">+</span> num1<span class="token punctuation">)</span> <span class="token comment">// 23236</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num3 <span class="token operator">+</span> num1<span class="token punctuation">)</span> <span class="token comment">// 1.32236</span>
<span class="token comment">// 使用 &#39;+&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>num2 <span class="token operator">+</span> <span class="token operator">+</span>num1<span class="token punctuation">)</span> <span class="token comment">// 259</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>num3 <span class="token operator">+</span> <span class="token operator">+</span>num1<span class="token punctuation">)</span> <span class="token comment">// 237.32</span>
<span class="token comment">// 使用 parseInt()</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 259</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-字符模板" tabindex="-1"><a class="header-anchor" href="#_3-字符模板" aria-hidden="true">#</a> 3. 字符模板</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;Lin&#39;</span>
<span class="token keyword">let</span> srt <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-箭头函数返回值的-两种写法" tabindex="-1"><a class="header-anchor" href="#_4-箭头函数返回值的-两种写法" aria-hidden="true">#</a> 4. 箭头函数返回值的 两种写法</h2><p>下面两种写法都一样</p><ul><li>有大括号的，必须写 <code>return</code> 才会返回执行结果</li><li>没有大括号的，直接把执行结果返回</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 写法一</span>
<span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
 	<span class="token keyword">const</span> data <span class="token operator">=</span>  data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">duplicateQuestionService</span><span class="token punctuation">(</span>_id<span class="token punctuation">)</span>
  <span class="token keyword">return</span> data
<span class="token punctuation">}</span>

<span class="token comment">// 写法二</span>
<span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">await</span> <span class="token function">duplicateQuestionService</span><span class="token punctuation">(</span>_id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","js的巧妙写法.html.vue"]]);export{d as default};

import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c,a as n,b as s,d as e,e as i}from"./app-4bc45b34.js";const l="/DaMaiCoding-Note/assets/image-20230818234218013-ded9949d.png",r="/DaMaiCoding-Note/assets/image-20230818234445396-f1db5be2.png",d="/DaMaiCoding-Note/assets/image-20230826114255558-037bd3e1.png",u="/DaMaiCoding-Note/assets/image-20230819161409886-f2987173.png",m="/DaMaiCoding-Note/assets/image-20230821182002533-6360e1db.png",v="/DaMaiCoding-Note/assets/image-20230821220756446-6b755e36.png",g="/DaMaiCoding-Note/assets/image-20230828181356418-6e4e2d90.png",k="/DaMaiCoding-Note/assets/image-20230906103601755-24be4eac.png",b="/DaMaiCoding-Note/assets/image-20230906114620262-42247764.png",h="/DaMaiCoding-Note/assets/image-20230907112115362-695507c7.png",f="/DaMaiCoding-Note/assets/image-20230907141223705-c1f3400c.png",_="/DaMaiCoding-Note/assets/image-20230908200732504-3603d29b.png",y="/DaMaiCoding-Note/assets/image-20230908235429187-e38a16d8.png",x="/DaMaiCoding-Note/assets/image-20230908235601852-e1f0d9a0.png",w="/DaMaiCoding-Note/assets/image-20230908235729677-343c5e1d.png",S="/DaMaiCoding-Note/assets/image-20230908235924004-4bab4efe.png",E="/DaMaiCoding-Note/assets/image-20230909001436697-938f38d1.png",D="/DaMaiCoding-Note/assets/image-20230910000428278-990b280a.png",R="/DaMaiCoding-Note/assets/d9305e895fcf1602e1185b88a460330-c3de1c33.png",M="/DaMaiCoding-Note/assets/image-20230911170550615-edb72575.png",N="/DaMaiCoding-Note/assets/4c91b857c624eeab567900616ca5de5-f96476f7.png",C="/DaMaiCoding-Note/assets/1694423025312-d2d57946.png",z="/DaMaiCoding-Note/assets/image-20231124135014800-dd34472a.png",O="/DaMaiCoding-Note/assets/image-20231123180321826-e5432c9b.png",j="/DaMaiCoding-Note/assets/image-20231123180415500-8b642611.png",q="/DaMaiCoding-Note/assets/image-20231123181436236-4c97c3b3.png",V="/DaMaiCoding-Note/assets/image-20231123181505290-3d535295.png",A="/DaMaiCoding-Note/assets/image-20231124115743839-7e879aee.png",T="/DaMaiCoding-Note/assets/image-20231124115831378-a4ea7759.png",W={},P=i('<h1 id="nestjs" tabindex="-1"><a class="header-anchor" href="#nestjs" aria-hidden="true">#</a> Nestjs</h1><h2 id="_1-基本配置" tabindex="-1"><a class="header-anchor" href="#_1-基本配置" aria-hidden="true">#</a> 1. 基本配置</h2><h3 id="_1-1-数据库配置" tabindex="-1"><a class="header-anchor" href="#_1-1-数据库配置" aria-hidden="true">#</a> 1.1 数据库配置</h3><figure><img src="'+l+`" alt="image-20230818234218013" tabindex="0" loading="lazy"><figcaption>image-20230818234218013</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装数据库</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-环境变量配置" tabindex="-1"><a class="header-anchor" href="#_1-2-环境变量配置" aria-hidden="true">#</a> 1.2 环境变量配置</h3><figure><img src="`+r+'" alt="image-20230818234445396" tabindex="0" loading="lazy"><figcaption>image-20230818234445396</figcaption></figure><h3 id="_1-3-每个文件功能" tabindex="-1"><a class="header-anchor" href="#_1-3-每个文件功能" aria-hidden="true">#</a> 1.3 每个文件功能</h3><figure><img src="'+d+'" alt="image-20230826114255558" tabindex="0" loading="lazy"><figcaption>image-20230826114255558</figcaption></figure><p><code>entity</code> 定义表结构</p><p><code>service</code> 数据库操作</p><p><code>controller</code> 前端传过来的数据校验，传回去的数据处理</p><p><code>module</code> 模块导入</p><h2 id="_2-数据之间的关系" tabindex="-1"><a class="header-anchor" href="#_2-数据之间的关系" aria-hidden="true">#</a> 2. 数据之间的关系</h2><h3 id="_2-1-文档" tabindex="-1"><a class="header-anchor" href="#_2-1-文档" aria-hidden="true">#</a> 2.1 文档</h3>',15),L={href:"https://typeorm.bootcss.com/select-query-builder",target:"_blank",rel:"noopener noreferrer"},$=i('<h2 id="_3-日志" tabindex="-1"><a class="header-anchor" href="#_3-日志" aria-hidden="true">#</a> 3. 日志</h2><h3 id="_3-1-记录日志" tabindex="-1"><a class="header-anchor" href="#_3-1-记录日志" aria-hidden="true">#</a> 3.1 记录日志</h3><figure><img src="'+u+'" alt="image-20230819161409886" tabindex="0" loading="lazy"><figcaption>image-20230819161409886</figcaption></figure><h2 id="_4-获取前端传过来的参数" tabindex="-1"><a class="header-anchor" href="#_4-获取前端传过来的参数" aria-hidden="true">#</a> 4. 获取前端传过来的参数</h2><figure><img src="'+m+'" alt="image-20230821182002533" tabindex="0" loading="lazy"><figcaption>image-20230821182002533</figcaption></figure><figure><img src="'+v+'" alt="image-20230821220756446" tabindex="0" loading="lazy"><figcaption>image-20230821220756446</figcaption></figure><h2 id="_5-数据校验插件" tabindex="-1"><a class="header-anchor" href="#_5-数据校验插件" aria-hidden="true">#</a> 5. 数据校验插件</h2>',7),H={href:"https://www.npmjs.com/package/validator",target:"_blank",rel:"noopener noreferrer"},U=i(`<h2 id="_6-创建-filters-文件" tabindex="-1"><a class="header-anchor" href="#_6-创建-filters-文件" aria-hidden="true">#</a> 6. 创建 filters 文件</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看创建 filters 文件会产生哪些文件</span>
nest g f filters/typeorm <span class="token parameter variable">--flat</span> <span class="token parameter variable">-d</span>
<span class="token comment"># 忽略 spec 文件</span>
nest g f filters/typeorm <span class="token parameter variable">--flat</span> --no-spec
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-cli-创建命令" tabindex="-1"><a class="header-anchor" href="#_7-cli-创建命令" aria-hidden="true">#</a> 7. cli 创建命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># --spec 和 --no-spec 表示不带测试文件，</span>
<span class="token comment"># --flat 和 --no-flat 是指定是否生成对应目录的</span>
<span class="token comment"># --skip-import  是指定不在 AppModule 里引入</span>

<span class="token comment"># 1. 创建 module，加 -d 即是查看，不直接创建</span>
nest g module user --no-spec

<span class="token comment"># 2. 创建 controller, 不带 测试文件</span>
nest g controller user --no-spec

<span class="token comment"># 3. 创建 service, 不带测试文件</span>
nest g <span class="token function">service</span> user --no-spec

<span class="token comment"># 一次性创建所有文件</span>
nest g resource menus --no-spec
<span class="token comment"># 也可以简写</span>
nest g res menus --no-spec
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-删除的区别" tabindex="-1"><a class="header-anchor" href="#_8-删除的区别" aria-hidden="true">#</a> 8. 删除的区别</h2><p>1.remove 可以一次性删除单个或者多个实例; 并且 remove 可以触发 BeforeRemove, AfterRemove 钩子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> repository<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
<span class="token keyword">await</span> repository<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">[</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">,</span>user3<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.delete 可以一次性删除单个或者多个 id 实例，或者给定条件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> repository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> repository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> repository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">username</span><span class="token operator">:</span> toimc<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-管道类型" tabindex="-1"><a class="header-anchor" href="#_9-管道类型" aria-hidden="true">#</a> 9. 管道类型</h2><figure><img src="`+g+'" alt="image-20230828181356418" tabindex="0" loading="lazy"><figcaption>image-20230828181356418</figcaption></figure><h3 id="_9-1-管道分类" tabindex="-1"><a class="header-anchor" href="#_9-1-管道分类" aria-hidden="true">#</a> 9.1 管道分类：</h3><p>全局级别：所有经过全局的数据都会被识别</p><p>控制器级别：所有经过控制器的数据都会被识别</p><p>变量级别：所有经过接口的数据都会被识别，主要用于，转换、识别</p><h3 id="_9-2-创建管道的过程" tabindex="-1"><a class="header-anchor" href="#_9-2-创建管道的过程" aria-hidden="true">#</a> 9.2 创建管道的过程</h3><ol><li>全局配置管道</li><li>创建 class 类，即 Entity，DTO</li><li>设置校验规则</li><li>使用该实体类或者 DTO</li></ol><h2 id="_10-jwt" tabindex="-1"><a class="header-anchor" href="#_10-jwt" aria-hidden="true">#</a> 10. JWT</h2><h3 id="_10-1-jwt-流程图" tabindex="-1"><a class="header-anchor" href="#_10-1-jwt-流程图" aria-hidden="true">#</a> 10.1 JWT 流程图</h3><figure><img src="'+k+'" alt="image-20230906103601755" tabindex="0" loading="lazy"><figcaption>image-20230906103601755</figcaption></figure><figure><img src="'+b+'" alt="image-20230906114620262" tabindex="0" loading="lazy"><figcaption>image-20230906114620262</figcaption></figure><figure><img src="'+h+'" alt="image-20230907112115362" tabindex="0" loading="lazy"><figcaption>image-20230907112115362</figcaption></figure><figure><img src="'+f+`" alt="image-20230907141223705" tabindex="0" loading="lazy"><figcaption>image-20230907141223705</figcaption></figure><h2 id="_11-生产环境配置" tabindex="-1"><a class="header-anchor" href="#_11-生产环境配置" aria-hidden="true">#</a> 11. 生产环境配置</h2><h3 id="_11-1-安装-node-环境-数据库环境" tabindex="-1"><a class="header-anchor" href="#_11-1-安装-node-环境-数据库环境" aria-hidden="true">#</a> 11.1 安装 node 环境 数据库环境</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1. nvm 安装</span>
<span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh <span class="token operator">|</span> <span class="token function">bash</span>

<span class="token comment"># 2. 查看 nvm 版本</span>
nvm <span class="token parameter variable">--version</span>

<span class="token comment"># 3. 查看 node 可安装版本</span>
nvm ls-remote 

<span class="token comment"># 4. node 安装</span>
nvm <span class="token function">install</span> <span class="token number">14.21</span>.3

<span class="token comment"># 5. 查看已下载 node</span>
nvm list

<span class="token comment"># 6. 查看 node npm 版本</span>
<span class="token function">node</span> <span class="token parameter variable">-v</span>
<span class="token function">npm</span> <span class="token parameter variable">-v</span>

<span class="token comment"># 7. 安装 cnpm</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npmmirror.com

<span class="token comment"># 8. 安装 nrm 管理 下载源</span>
cnpm i <span class="token parameter variable">-g</span> nrm

<span class="token comment"># 9. 切换淘宝源</span>
nrm use taobao

<span class="token comment"># 10. 安装 pnpm</span>
cnpm i <span class="token parameter variable">-g</span> <span class="token function">pnpm</span>

<span class="token comment"># 11. 安装 pm2</span>
cnpm i <span class="token parameter variable">-g</span> pm2

<span class="token comment"># 12. 安装 docker-compose</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> https://get.daocloud.io/docker/compose/releases/download/v2.13.0/docker-compose-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">\`</span></span>-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">\`</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose

<span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),B={href:"https://gitee.com/mirrors/nvm",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://npmmirror.com/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/",target:"_blank",rel:"noopener noreferrer"},Y=i(`<p>安装 docker 容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建 mysql 文件夹</span>
<span class="token builtin class-name">cd</span> /home
<span class="token function">mkdir</span> mysql

<span class="token comment"># 创建 docker-compose.yml 文件</span>
<span class="token comment"># 复制下面 docker-compose.yml 中的内容</span>
<span class="token function">vi</span> docker-compose.yml

<span class="token comment"># 安装环境</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>

<span class="token comment"># 查看服务是否运行</span>
<span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>docker ps 运行结果</p><figure><img src="`+_+`" alt="image-20230908200732504" tabindex="0" loading="lazy"><figcaption>image-20230908200732504</figcaption></figure><p>输入服务器地址即可访问数据库：<code>47.96.148.111:12005</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># docker-compose.yml</span>
<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.1&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>default<span class="token punctuation">-</span>authentication<span class="token punctuation">-</span>plugin=mysql_native_password
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> dK%H^5D<span class="token comment">#Wu3PQXkPz2lM$0H#ryI1lDIg</span>
      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> nestjs<span class="token punctuation">-</span>backend
      <span class="token key atrule">MYSQL_USER</span><span class="token punctuation">:</span> lin
      <span class="token key atrule">MYSQL_PASSWORD</span><span class="token punctuation">:</span> i2Eiv1<span class="token important">&amp;VPiyWsdj@hQ%*gJbYX$KTWfgD</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /home/mysql/db<span class="token punctuation">:</span>/var/lib/mysql
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 12000<span class="token punctuation">:</span><span class="token number">3306</span>

  <span class="token comment"># navicat</span>
  <span class="token key atrule">adminer</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> adminer
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 12005<span class="token punctuation">:</span><span class="token number">8080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-2-配置-github-action-阿里云-自动化部署" tabindex="-1"><a class="header-anchor" href="#_11-2-配置-github-action-阿里云-自动化部署" aria-hidden="true">#</a> 11.2 配置 github action + 阿里云 自动化部署</h3><p>在 nest 项目中加入 <code>.github/workflows/deploy.yml</code></p><p>其中 <code>deploy.yml</code> 可以随便起</p><figure><img src="`+y+`" alt="image-20230908235429187" tabindex="0" loading="lazy"><figcaption>image-20230908235429187</figcaption></figure><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy to CentOS Server <span class="token comment"># 这个脚本的描述</span>

<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token comment"># 当合并到 master 分支，就开始执行下面脚本</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> master

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">deploy</span><span class="token punctuation">:</span> 
    <span class="token comment"># 定义job运行环境，使用linux环境</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest

    <span class="token key atrule">steps</span><span class="token punctuation">:</span> <span class="token comment"># 检测代码</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout code
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2
      <span class="token comment"># 拷贝文件到 服务器</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Copy files to server
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> appleboy/scp<span class="token punctuation">-</span>action@master
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">host</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SERVER_HOST <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment"># 主机名</span>
          <span class="token key atrule">username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SERVER_USERNAME <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment"># 用户名</span>
          <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SERVER_PASSWORD <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment"># 密码</span>
          <span class="token key atrule">source</span><span class="token punctuation">:</span> <span class="token string">&#39;./&#39;</span>
          <span class="token key atrule">target</span><span class="token punctuation">:</span> /home/apps<span class="token punctuation">-</span>server/realworld<span class="token punctuation">-</span>server/
      <span class="token comment"># 通过 SSH 连接服务器，并执行命令</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> SSH to server and restart application
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> appleboy/ssh<span class="token punctuation">-</span>action@master
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">host</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SERVER_HOST <span class="token punctuation">}</span><span class="token punctuation">}</span>
          <span class="token key atrule">username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SERVER_USERNAME <span class="token punctuation">}</span><span class="token punctuation">}</span>
          <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SERVER_PASSWORD <span class="token punctuation">}</span><span class="token punctuation">}</span>
          <span class="token key atrule">script</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
            cd /home/apps-server/realworld-server
            npm install
            npm run build
            pm2 start npm --name nest-backend -- run start:prod</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置 <code>SERVER_HOST</code>、<code>SERVER_USERNAME</code>、<code>SERVER_PASSWORD</code></p><figure><img src="`+x+'" alt="image-20230908235601852" tabindex="0" loading="lazy"><figcaption>image-20230908235601852</figcaption></figure><figure><img src="'+w+'" alt="image-20230908235729677" tabindex="0" loading="lazy"><figcaption>image-20230908235729677</figcaption></figure><p><code>SERVER_USERNAME</code>、<code>SERVER_PASSWORD</code> 也按上面的方式再创建一个即可</p><p><code>SERVER_USERNAME</code> 通常默认就是 <code>root</code></p><p><code>SERVER_PASSWORD</code> 为主机密码</p><p>下图，为创建结果</p><figure><img src="'+S+'" alt="image-20230908235924004" tabindex="0" loading="lazy"><figcaption>image-20230908235924004</figcaption></figure><h3 id="_11-3-遇到的问题" tabindex="-1"><a class="header-anchor" href="#_11-3-遇到的问题" aria-hidden="true">#</a> 11.3 遇到的问题</h3><figure><img src="'+E+`" alt="image-20230909001436697" tabindex="0" loading="lazy"><figcaption>image-20230909001436697</figcaption></figure><p><strong>【问题】</strong></p><p>Centos7 GLIBC_2.25 glibc 版本过低问题解决</p><p><strong>1. 升级 glibc 版本</strong></p><blockquote><p>试过了，很危险，这个是很底层的东西，失误的话直接会导致，系统奔溃，而且麻烦，不推荐！</p></blockquote><p><strong>2. 升级 系统版本</strong></p><p>我本来是 CentOS 7，直接升级 CentOS Stream 9，从根本上解决问题</p><h2 id="_12-pm2-操作" tabindex="-1"><a class="header-anchor" href="#_12-pm2-操作" aria-hidden="true">#</a> 12. pm2 操作</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看</span>
pm2 list
pm2 status

<span class="token comment"># 停止服务 (1 为 id)</span>
pm2 stop <span class="token number">1</span>

<span class="token comment"># 删除服务</span>
pm2 delete <span class="token number">1</span>

<span class="token comment"># 执行服务，且开机自启</span>
pm2 start <span class="token function">npm</span> <span class="token parameter variable">--name</span> nest-backend -- run start:prod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-宝塔" tabindex="-1"><a class="header-anchor" href="#_13-宝塔" aria-hidden="true">#</a> 13. 宝塔</h2><h3 id="_13-1-基本操作" tabindex="-1"><a class="header-anchor" href="#_13-1-基本操作" aria-hidden="true">#</a> 13.1 基本操作</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 打开宝塔 命令行</span>
bt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+D+'" alt="image-20230910000428278" tabindex="0" loading="lazy"><figcaption>image-20230910000428278</figcaption></figure><h3 id="_13-2-宝塔反向代理配置" tabindex="-1"><a class="header-anchor" href="#_13-2-宝塔反向代理配置" aria-hidden="true">#</a> 13.2 宝塔反向代理配置</h3><p>配置反向代理，将本地端口，映射到域名上</p><ol><li>添加域名</li></ol><figure><img src="'+R+'" alt="d9305e895fcf1602e1185b88a460330" tabindex="0" loading="lazy"><figcaption>d9305e895fcf1602e1185b88a460330</figcaption></figure><ol start="2"><li>配置 ssl 证书，开启 https 访问</li></ol><figure><img src="'+M+'" alt="image-20230911170550615" tabindex="0" loading="lazy"><figcaption>image-20230911170550615</figcaption></figure><ol start="3"><li>配置反向代理</li></ol><figure><img src="'+N+'" alt="4c91b857c624eeab567900616ca5de5" tabindex="0" loading="lazy"><figcaption>4c91b857c624eeab567900616ca5de5</figcaption></figure><ol start="4"><li>开启反向代理 ssl，开启 https 访问</li></ol><figure><img src="'+C+'" alt="1694423025312" tabindex="0" loading="lazy"><figcaption>1694423025312</figcaption></figure><h3 id="_13-3-docker-镜像下载加速" tabindex="-1"><a class="header-anchor" href="#_13-3-docker-镜像下载加速" aria-hidden="true">#</a> 13.3 docker 镜像下载加速</h3><p>国内镜像：<code>https://registry.docker-cn.com</code>、<code>http://hub-mirror.c.163.com</code></p><figure><img src="'+z+'" alt="image-20231124135014800" tabindex="0" loading="lazy"><figcaption>image-20231124135014800</figcaption></figure><h2 id="_14-数据库迁移" tabindex="-1"><a class="header-anchor" href="#_14-数据库迁移" aria-hidden="true">#</a> 14. 数据库迁移</h2><h3 id="_14-1-mysql-数据迁移" tabindex="-1"><a class="header-anchor" href="#_14-1-mysql-数据迁移" aria-hidden="true">#</a> 14.1 mysql 数据迁移</h3><p>背景：两台云服务器，docker 中的 mysql 数据</p><p>工具：navicat 16.3.2</p><p>迁移方式：导出 sql，导入 sql</p><p><strong>导出</strong></p><figure><img src="'+O+'" alt="image-20231123180321826" tabindex="0" loading="lazy"><figcaption>image-20231123180321826</figcaption></figure><p><strong>导入</strong></p><p>选择 刚才导出的 <code>.sql</code> 文件导入即可</p><figure><img src="'+j+'" alt="image-20231123180415500" tabindex="0" loading="lazy"><figcaption>image-20231123180415500</figcaption></figure><p><strong>验证数据是否完整</strong></p><p>查询条数是否一致，使用 <code>sql</code> 语句：<code>SELECT count(1) from wx_users_like</code></p><figure><img src="'+q+'" alt="image-20231123181436236" tabindex="0" loading="lazy"><figcaption>image-20231123181436236</figcaption></figure><p>查询数据库版本是否一致：<code>show variables like &#39;%version%&#39;</code></p><p>可以看到数据库版本是 8.1.0</p><figure><img src="'+V+'" alt="image-20231123181505290" tabindex="0" loading="lazy"><figcaption>image-20231123181505290</figcaption></figure><h3 id="_14-2-redis-数据迁移" tabindex="-1"><a class="header-anchor" href="#_14-2-redis-数据迁移" aria-hidden="true">#</a> 14.2 redis 数据迁移</h3><p>背景：两台云服务器，docker 中的 mysql 数据</p><p>工具：navicat 16.3.2</p><p>迁移方式：导出备份，执行备份文件</p><p><strong>新建备份</strong></p><figure><img src="'+A+'" alt="image-20231124115743839" tabindex="0" loading="lazy"><figcaption>image-20231124115743839</figcaption></figure><p><strong>执行备份文件</strong></p><figure><img src="'+T+`" alt="image-20231124115831378" tabindex="0" loading="lazy"><figcaption>image-20231124115831378</figcaption></figure><h2 id="_15-云服务器挂载-数据盘" tabindex="-1"><a class="header-anchor" href="#_15-云服务器挂载-数据盘" aria-hidden="true">#</a> 15. 云服务器挂载 数据盘</h2><h3 id="挂载命令" tabindex="-1"><a class="header-anchor" href="#挂载命令" aria-hidden="true">#</a> 挂载命令</h3><p>如果使用正式版挂载失败，可以考虑使用后面的测试版，特别是安装过Windows系统的如果遇到无法挂载数据盘的情况可以考虑使用测试版脚本</p><p><strong>Centos/Fedora</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token function">wget</span> <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> auto_disk.sh http://download.bt.cn/tools/auto_disk.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> auto_disk.sh
<span class="token comment">#备用：</span>
yum <span class="token function">install</span> <span class="token function">wget</span> <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> auto_disk.sh https://raw.githubusercontent.com/wn789/www/master/auto_disk.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> auto_disk.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Ubuntu</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> <span class="token parameter variable">-O</span> auto_disk.sh http://download.bt.cn/tools/auto_disk.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">bash</span> auto_disk.sh
<span class="token comment">#备用：</span>
<span class="token function">wget</span> <span class="token parameter variable">-O</span> auto_disk.sh https://raw.githubusercontent.com/wn789/www/master/auto_disk.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">bash</span> auto_disk.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Debian</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> <span class="token parameter variable">-O</span> auto_disk.sh http://download.bt.cn/tools/auto_disk.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> auto_disk.sh
<span class="token comment">#备用：</span>
<span class="token function">wget</span> <span class="token parameter variable">-O</span> auto_disk.sh https://raw.githubusercontent.com/wn789/www/master/auto_disk.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> auto_disk.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>挂载很简单，只需根据自己系统执行相对命令即可</p><h2 id="_16-常见问题解决方法" tabindex="-1"><a class="header-anchor" href="#_16-常见问题解决方法" aria-hidden="true">#</a> 16. 常见问题解决方法</h2><ol><li><p>问题：数据库连接失败</p><p>解决方案：因为删除某个模块导致报错，删除 <code>dist</code> ，重新打包，通常就能解决问题</p></li><li><p>问题：明明 <code>.entity</code> 文件定义的字段不多，却表中莫名多了很多字段</p><p>解决方案：因为去掉了一些字段，编译后的<code>dist</code>中没有去掉这些字段，导致重复创建，删除 <code>dist</code> ，重新打包，通常就能解决问题</p></li></ol>`,82);function J(K,X){const a=o("ExternalLinkIcon");return p(),c("div",null,[P,n("p",null,[n("a",L,[s("TypeORM 中文网"),e(a)])]),$,n("p",null,[n("a",H,[s("validator 数据校验插件"),e(a)])]),U,n("blockquote",null,[n("p",null,[n("a",B,[s("nvm 安装文档"),e(a)])]),n("p",null,[n("a",Q,[s("cnpm 镜像站"),e(a)])]),n("p",null,[n("a",I,[s("docker-ce docker国内镜像"),e(a)])])]),Y])}const Z=t(W,[["render",J],["__file","Nestjs.html.vue"]]);export{Z as default};

import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c as o,a as e,b as p,d as c,e as t}from"./app-da553741.js";const d={},i=t(`<h1 id="_2025前端最新面试题-进阶篇ts" tabindex="-1"><a class="header-anchor" href="#_2025前端最新面试题-进阶篇ts" aria-hidden="true">#</a> 2025前端最新面试题-进阶篇ts</h1><h2 id="_1-你讲一下-你对-ts-泛型的理解" tabindex="-1"><a class="header-anchor" href="#_1-你讲一下-你对-ts-泛型的理解" aria-hidden="true">#</a> 1. 你讲一下，你对 ts 泛型的理解？</h2><p>在业务逻辑时，如果有某些函数逻辑重复率高，但是类型不同</p><p>那么就可以定义泛型，等执行时再给予特定的类型</p><p>当时，用泛型写太多逻辑的话，会显得复杂，难易理解，通常能不用就不用</p><h2 id="_2-说说你对枚举类型的理解" tabindex="-1"><a class="header-anchor" href="#_2-说说你对枚举类型的理解" aria-hidden="true">#</a> 2. 说说你对枚举类型的理解？</h2><p><strong>是什么？</strong></p><p>一种整型常数集合</p><p><strong>使用？</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> xxx <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>应用场景？</strong></p><p>商品列表，表示商品的上架、下架、销毁等</p><p>key - value 对象就可以使用枚举</p>`,13),h={href:"https://vue3js.cn/interview/typescript/enum.html#%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},l=t('<h2 id="_3-promise-为什么可以一直-then-下去" tabindex="-1"><a class="header-anchor" href="#_3-promise-为什么可以一直-then-下去" aria-hidden="true">#</a> 3. Promise 为什么可以一直 then 下去？</h2><p>说一下我的理解哈</p><p><code>then</code>方法（和<code>catch</code>方法）执行后的内部都会返回一个新的<code>Promise</code>对象，且默认状态都是<code>resolved</code>，所以才能一直<code>then</code>下去</p><h2 id="_4-js-与-ts-类型对比" tabindex="-1"><a class="header-anchor" href="#_4-js-与-ts-类型对比" aria-hidden="true">#</a> 4. js 与 ts 类型对比</h2><p>js：</p><p>值类型：String、Number、Boolean、Null、Undefined、Symbol</p><p>引用类型：Object、Array、Function，RegExp、Date</p><p>ts：</p><p>特有类型：Any、unknow、enum、void、never、Tupple、Union、Literal、Type、Interface</p><p><strong>【扩展】什么时候用 type、什么时候用 Interface?</strong></p><p>通常使用 interface，无法使用 interface 再用 type</p><p>interface 可以合并，type 不行</p>',12);function _(u,m){const n=s("ExternalLinkIcon");return r(),o("div",null,[i,e("p",null,[e("a",h,[p("面试官：说说你对 TypeScript 中枚举类型的理解？应用场景？"),c(n)])]),l])}const g=a(d,[["render",_],["__file","2025前端最新面试题-进阶篇ts.html.vue"]]);export{g as default};

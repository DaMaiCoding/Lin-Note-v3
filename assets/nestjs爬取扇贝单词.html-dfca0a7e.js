import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as t}from"./app-da553741.js";const e="/DaMaiCoding-Note/assets/image-20240414230208622-1ce8aa16.png",p="/DaMaiCoding-Note/assets/image-20240414230527771-693b8c9b.png",i="/DaMaiCoding-Note/assets/image-20240414230825082-ce996ded.png",o="/DaMaiCoding-Note/assets/image-20240414231037268-8889030e.png",c="/DaMaiCoding-Note/assets/image-20240414232909991-6e748792.png",l="/DaMaiCoding-Note/assets/image-20240414233716651-d2278610.png",u="/DaMaiCoding-Note/assets/image-20240414234149728-0ee52471.png",r="/DaMaiCoding-Note/assets/image-20240414234334711-2ef75331.png",d="/DaMaiCoding-Note/assets/image-20240414234426512-62c07850.png",g="/DaMaiCoding-Note/assets/image-20240414234738732-d30a5a0d.png",k="/DaMaiCoding-Note/assets/image-20240414234801997-62bed2bc.png",m="/DaMaiCoding-Note/assets/image-20240414233838694-54a62525.png",v={},b=t(`<h1 id="nestjs爬取扇贝单词" tabindex="-1"><a class="header-anchor" href="#nestjs爬取扇贝单词" aria-hidden="true">#</a> nestjs爬取扇贝单词</h1><h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx @nestjs/cli new crawler
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+e+`" alt="image-20240414230208622" tabindex="0" loading="lazy"><figcaption>image-20240414230208622</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run start <span class="token comment"># 启动项目，看到 Hello World!，就是启动成功了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+p+'" alt="image-20240414230527771" loading="lazy">·</p><h2 id="分析页面结构" tabindex="-1"><a class="header-anchor" href="#分析页面结构" aria-hidden="true">#</a> 分析页面结构</h2><p>打开扇贝官网，点击分页，我们可以看到，每次点击分页都是去请求一次接口获取到数据的，那么我们要爬取的单词，直接从接口中获取就好了</p><figure><img src="'+i+'" alt="image-20240414230825082" tabindex="0" loading="lazy"><figcaption>image-20240414230825082</figcaption></figure><p>那么问题来了，接口获取的数据都是加密的，这怎么搞</p><figure><img src="'+o+'" alt="image-20240414231037268" tabindex="0" loading="lazy"><figcaption>image-20240414231037268</figcaption></figure><p>居然后端返回的加密的数据，那么解密一定是在前端实现，点开源代码</p><figure><img src="'+c+'" alt="image-20240414232909991" tabindex="0" loading="lazy"><figcaption>image-20240414232909991</figcaption></figure><p>我们从最前面第一个函数开始 debug，找到了，解密函数</p><figure><img src="'+l+'" alt="image-20240414233716651" tabindex="0" loading="lazy"><figcaption>image-20240414233716651</figcaption></figure><p>源代码被混淆过了，无法查看具体实现原理，但是我们不需要知道具体实现原理是什么，只要我们把代码全扣下来，直接调用即可</p><figure><img src="'+u+'" alt="image-20240414234149728" tabindex="0" loading="lazy"><figcaption>image-20240414234149728</figcaption></figure><p>这个 <code>&lt;script&gt;</code> 中就包含了解密函数，我们把这一部分扣下来，新建一个 <code>.js</code> ，将代码放进去，修改下代码，把解密函数导出去</p><p>因为这是一个闭包函数，代码外面无法调用，所以要逆向这个函数</p><p>使用一个技巧，在外面定义一个变量接收这个函数，文件末尾导出</p><p><img src="'+r+'" alt="image-20240414234334711" loading="lazy">·</p><figure><img src="'+d+'" alt="image-20240414234426512" tabindex="0" loading="lazy"><figcaption>image-20240414234426512</figcaption></figure><p>其他页面导入这个函数，并将接口拿到的数据解密即可</p><figure><img src="'+g+'" alt="image-20240414234738732" tabindex="0" loading="lazy"><figcaption>image-20240414234738732</figcaption></figure><figure><img src="'+k+`" alt="image-20240414234801997" tabindex="0" loading="lazy"><figcaption>image-20240414234801997</figcaption></figure><h2 id="实现思路剖析" tabindex="-1"><a class="header-anchor" href="#实现思路剖析" aria-hidden="true">#</a> 实现思路剖析</h2><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h2 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h2><p>纯 js 爬取单词</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> winw <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span> <span class="token punctuation">(</span><span class="token string">&quot;vocabulary.html&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;new windiw&#39;</span><span class="token punctuation">,</span><span class="token string">&quot;scrollbars=yes,height=1000,width=500&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> n1 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>b<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span>

    <span class="token keyword">function</span> <span class="token function">get_next_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        t3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;index_word__3waO0&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> t3<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            text <span class="token operator">=</span> t3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
            t <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token string">&#39;     &#39;</span><span class="token operator">+</span> text<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
            winw<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
            winw<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/br&gt;&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
        n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span>
        n1 
        b<span class="token punctuation">[</span>b<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">&gt;=</span>n1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">clearInterval</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;循环结束，爬取完毕&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    num <span class="token operator">=</span><span class="token function">setInterval</span><span class="token punctuation">(</span>get_next_page<span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="image-20240414233838694" tabindex="0" loading="lazy"><figcaption>image-20240414233838694</figcaption></figure><blockquote><p>浏览器控制台，直接粘贴代码执行，就会爬取单词，放入新窗口</p></blockquote>',33),f=[b];function h(_,x){return a(),s("div",null,f)}const N=n(v,[["render",h],["__file","nestjs爬取扇贝单词.html.vue"]]);export{N as default};

import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as o,a as n,b as s,d as c,e as i}from"./app-da553741.js";const l="/DaMaiCoding-Note/assets/1489720931-7116-4AQC6-21e9743d.png",u="/DaMaiCoding-Note/assets/1489720930-6827-Vtk4m-babe4635.png",r="/DaMaiCoding-Note/assets/1489720930-5882-BO4qO-feedf9f5.png",k="/DaMaiCoding-Note/assets/image-20230724171733171-be341860.png",d="/DaMaiCoding-Note/assets/image-20230725095854293-a17df0c8.png",v="/DaMaiCoding-Note/assets/image-20230808184221177-a9e7ef18.png",m={},b=i('<h1 id="js-面试题" tabindex="-1"><a class="header-anchor" href="#js-面试题" aria-hidden="true">#</a> JS 面试题</h1><h2 id="_1-直接赋值-引用-、浅拷贝、深拷贝" tabindex="-1"><a class="header-anchor" href="#_1-直接赋值-引用-、浅拷贝、深拷贝" aria-hidden="true">#</a> 1. 直接赋值 (引用)、浅拷贝、深拷贝</h2><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h3><ul><li>**直接赋值 (引用)：**其实就是对象的引用（别名）</li><li>**浅拷贝：**拷贝父对象，不会拷贝对象的内部的子对象</li><li>**深拷贝：**完全拷贝了父对象及其子对象</li></ul><ol><li><strong>b = a:</strong> 赋值引用，a 和 b 都指向同一个对象</li></ol><figure><img src="'+l+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol start="2"><li><strong>b = a.copy():</strong> 浅拷贝, a 和 b 是一个独立的对象，但他们的子对象还是指向统一对象（是引用）</li></ol><figure><img src="'+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol start="3"><li><strong>b = copy.deepcopy(a):</strong> 深度拷贝, a 和 b 完全拷贝了父对象及其子对象，两者是完全独立的</li></ol><figure><img src="'+r+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><p><strong>浅拷贝</strong></p><p>对象：Object.assign()</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token string">&quot;kobe&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">39</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> initalObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span>
initalObj<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&quot;wade&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">//wade</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>object 只有一层的时候，是深拷贝</p></blockquote><p>这个 API 还可用于 对象合并</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ul <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> u2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> u3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>ul，u2<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u3<span class="token punctuation">)</span> <span class="token comment">// { name:&#39;zhangsan&#39;，age: 12 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组：concat、slice</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">&#39;kobe&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span>

<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 或者 let arr2 = arr.concat()</span>

arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">&#39;6666&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="image-20230724171733171" tabindex="0" loading="lazy"><figcaption>image-20230724171733171</figcaption></figure><blockquote><p>Array 的 slice 和 concat 方法不修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组</p></blockquote><p><code>扩展运算符</code>，也可以进行 <code>浅拷贝</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>a<span class="token punctuation">}</span>

b<span class="token punctuation">.</span>b<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span>
a<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="image-20230725095854293" tabindex="0" loading="lazy"><figcaption>image-20230725095854293</figcaption></figure><p><strong>深拷贝</strong></p><ol><li>序列化 JSON.parse(JSON.stringify())</li></ol><blockquote><p>缺点：虽然可以实现数组或对象深拷贝，但不能处理函数</p></blockquote><ol start="2"><li>递归遍历</li></ol><p>手写实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义检测数据类型的功能函数</span>
<span class="token keyword">function</span> <span class="token function">checkedType</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现深度克隆---对象/数组</span>
<span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 判断拷贝的数据类型</span>
    <span class="token comment">// 初始化变量result 成为最终克隆的数据</span>
    <span class="token keyword">let</span> result<span class="token punctuation">,</span>targetType <span class="token operator">=</span> <span class="token function">checkedType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>targetType <span class="token operator">===</span> <span class="token string">&#39;Object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>targetType <span class="token operator">===</span> <span class="token string">&#39;Array&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> target
    <span class="token punctuation">}</span>
    <span class="token comment">// 遍历目标数据</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 获取遍历数据结构的每一项值</span>
        <span class="token keyword">let</span> value<span class="token operator">=</span>target<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token comment">// 判断目标结构里的每一值是否存在对象/数组</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkedType</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;Object&#39;</span> <span class="token operator">||</span> <span class="token function">checkedType</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;Array&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//对象/数组里嵌套了对象/数组</span>
            <span class="token comment">// 继续遍历获取到value值</span>
            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token comment">//获取到value值是基本的数据类型或者是函数</span>
            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>原理：递归遍历所有对象、数组，直到都是基本数据类型，然后再去复制，就是深拷贝</p></blockquote><ol start="3"><li>第三方函数库 <code>loadsh</code></li></ol><h2 id="_2-es6-新特性" tabindex="-1"><a class="header-anchor" href="#_2-es6-新特性" aria-hidden="true">#</a> 2. ES6 新特性</h2><h3 id="箭头函数函数-与-普通函数的区别" tabindex="-1"><a class="header-anchor" href="#箭头函数函数-与-普通函数的区别" aria-hidden="true">#</a> 箭头函数函数 与 普通函数的区别？</h3><ul><li>this 指向不同, 且箭头函数 this 无法改变 (因为 箭头函数本身就没有原型，所以也没有所谓的 this)</li><li>写法不同, 且箭头函数都是匿名函数</li><li>箭头函数、没有 <code>prototype</code>、没有自己的 <code>this</code> 指向、不可以使用 <code>arguments</code>、自然不可以 <code>new</code></li><li>普通函数的 this ，谁调用了这个函数，this 就指向谁</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;wyy&#39;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;wangcai&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>              

        <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                   
        <span class="token punctuation">}</span>
        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// window.test( )</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+`" alt="image-20230808184221177" tabindex="0" loading="lazy"><figcaption>image-20230808184221177</figcaption></figure><h3 id="var-和-let、const" tabindex="-1"><a class="header-anchor" href="#var-和-let、const" aria-hidden="true">#</a> var 和 let、const</h3><ul><li>变量提升</li><li>块级作用域</li><li>暂时性死区</li><li>重复声明</li></ul><h3 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h3><h4 id="promise-状态" tabindex="-1"><a class="header-anchor" href="#promise-状态" aria-hidden="true">#</a> Promise 状态</h4><p>Promise 有三种状态：pengding、fulfilled、rejected</p><p>Promise 的状态一经改变，便可以修改</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

pro<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;resolve1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
	<span class="token function">catch</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;catch1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// reject1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="promise-链式调用" tabindex="-1"><a class="header-anchor" href="#promise-链式调用" aria-hidden="true">#</a> Promise 链式调用</h4><p>Promise 的链式调用，有三个 <code>Promise.prototype.then()</code>、<code>Promise.prototype.catch()</code> 和 <code>Promise.prototype.finally()</code></p><blockquote><p><code>Promise.prototype.then()</code> then 方法可以接收两个回调函数作为参数，第一个参数 <code>resolve()</code> 返回的数据，第二个参数 <code>reject()</code> 返回的数据</p><p>当然了，异常也会被第二个参数接收</p></blockquote><p><code>.finally()</code> 一定会执行，但是它没有回调参数</p><p><code>.then()</code> 可有多个，<code>.catch()</code> 也可以有多个，但是 <code>.then()</code> 或者 <code>.catch()</code> 必须返回一个 Promise 才可以这样做</p><p>数据的接收顺序</p><ul><li>then -&gt; catch -&gt; finally</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

pro<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;resolve1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reject1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
	<span class="token function">catch</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;catch1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span> <span class="token comment">// reject1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>只有 <code>.then()</code> 的第二个参数传，<code>reject()</code> 返回的数据 或者是 异常才会进到 <code>.catch()</code> 中</p><p><strong>[注意]</strong> Promise 抛出异常是不会，直接中断的，会进入 <code>.then()</code> 的第二个参数，没有 <code>.then()</code> 的第二个参数才会 进入 <code>.catch()</code> 中</p></blockquote><h4 id="promise-的一些-api" tabindex="-1"><a class="header-anchor" href="#promise-的一些-api" aria-hidden="true">#</a> Promise 的一些 API</h4><ul><li>Promise.all() 一个 <code>reject()</code>, 整个结束执行 (获取全部都成功，再返回)</li><li>Promise.allSettled() 全部状态变更，才执行结束</li><li>Promise.any() 一个 <code>resolve()</code>，整个再返回 (获取全部都失败，再返回)</li><li>Promise.race() 那个状态先改变，那个先返回</li></ul>`,55),g=n("p",null,"await 后面跟着一个表达式，获取表达式的返回值",-1),h={href:"https://www.nowcoder.com/discuss/353148496452722688?sourceSSR=users",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"_3-事件循环",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-事件循环","aria-hidden":"true"},"#"),s(" 3. 事件循环")],-1);function y(j,w){const a=e("ExternalLinkIcon");return p(),o("div",null,[b,n("blockquote",null,[g,n("p",null,[n("a",h,[s("理解 JavaScript 的 async/await"),c(a)])])]),f])}const q=t(m,[["render",y],["__file","js.html.vue"]]);export{q as default};

import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o,c,e as d}from"./app-4bc45b34.js";const a={},i=d('<h1 id="_2025前端最新面试题-优化篇" tabindex="-1"><a class="header-anchor" href="#_2025前端最新面试题-优化篇" aria-hidden="true">#</a> 2025前端最新面试题-优化篇</h1><h2 id="核心思想" tabindex="-1"><a class="header-anchor" href="#核心思想" aria-hidden="true">#</a> 核心思想</h2><p><strong>原则</strong></p><p>多使用内存、缓存, 减少计算、减少网络请求</p><p><strong>方向</strong></p><p>加载页面, 页面渲染, 页面操作流畅度</p><h2 id="_1-vue-中的性能优化" tabindex="-1"><a class="header-anchor" href="#_1-vue-中的性能优化" aria-hidden="true">#</a> 1. Vue 中的性能优化？</h2><p><strong>编码方面：</strong></p><ul><li>不需要渲染到视图的数据，不要定义成响应式数，这样可以减少 Vue 监听性能消耗</li><li>v-if 与 v-for 不要连用，将 <code>v-if</code> 提高到更外一层</li><li>v-for 每项元素绑定事件时，使用事件代理</li><li>v-for 时，key 要唯一</li><li>根据项目情况，合理使用 懒加载、防抖节流、动态加载</li></ul><p><strong>SEO 优化：</strong></p><ul><li>服务端 SSR</li></ul><p><strong>打包优化：</strong></p><ul><li>压缩代码</li><li>资源合并，压缩</li><li>sourceMap 优化</li></ul><p><strong>用户体验：</strong></p><ul><li>骨架屏</li><li>先加载主要数据，一些需要操作的数据可以等用到了再加载</li><li>使用缓存，把一些变化不大的数据，先进行缓存，以提升页面加载速度</li></ul><h2 id="_2-uniapp-中的性能优化" tabindex="-1"><a class="header-anchor" href="#_2-uniapp-中的性能优化" aria-hidden="true">#</a> 2. Uniapp 中的性能优化？</h2><p>缓存大型图表信息，采用本地缓存，本地缓存无法直接存储很多有限制大小，单个 key 允许存储的最大数据长度为 <code>1MB</code>，所有数据存储上限为 <code>10MB</code>。</p><p>解决方案，采用链表存储，解决单块数据过大的问题</p><p>微信编写 <code>swripter</code> 卡顿，不方便，采用嵌入 <code>web-view</code> 的方式</p><h2 id="_3-eachrts-图表百万数据展现优化" tabindex="-1"><a class="header-anchor" href="#_3-eachrts-图表百万数据展现优化" aria-hidden="true">#</a> 3. eachrts 图表百万数据展现优化？</h2><ol><li><p>后端数据聚合。后端进行数据聚合，每次单个chart数据不超过2000。</p></li><li><p>前端交互、鼠标缩放、拖拽，根据时间，重新请求，整合更新数据。</p></li><li><p>降采样策略</p></li><li><p>dataZoom</p></li></ol><h2 id="_4-echarts-图表问题" tabindex="-1"><a class="header-anchor" href="#_4-echarts-图表问题" aria-hidden="true">#</a> 4. echarts 图表问题？</h2><p>微信小程序总，canvas 画布优先级高于 view，会导致 canvas 遮挡了 view</p><p>解决办法；外层用 <code>cover-view</code> 覆盖 <code>canvas</code></p><h2 id="_5-可视化大屏适配" tabindex="-1"><a class="header-anchor" href="#_5-可视化大屏适配" aria-hidden="true">#</a> 5. 可视化大屏适配</h2><ol><li>整体自适应，适配移动端</li></ol><p>背景：</p><p>常见大屏适配</p><ul><li>按百分比设计填充满屏幕，会导致变形</li><li>通过缩放，会导致空白太多，也不好看</li></ul><p>如何解决不同设备的大小变化？</p><p>整体布局采用 <code>element Plus</code> 栅格组件，按比例布局，分左中右三部分，之后内容部分采用 百分比继承父元素的栅格组件、字体采用 <code>px</code> 进行布局</p><p>如何解决页面字体大小不变，<code>echarts</code> 图表字体不变，导致 x 轴文字出现位置偏差？</p><p>页面字体大小问题？</p><p>因为，为了保证我们的页面与设计相差不大，所以字体大小也是设计稿的 <code>px</code> 来的</p><p>根据屏幕大小设置 <code>html</code> 的 <code>font-size</code> 为不同 <code>px</code></p><p>再使用 <code>postCssPxToRem</code> 插件将 <code>px</code> 转为 <code>rem</code>，因为 <code>rem</code> 的特性，<code>rem</code> 是根据 <code>html</code> 的 <code>font-size</code> 进行变化的</p><p>只要 <code>font-size</code> 一变，其他字体也会变</p><p><code>echarts</code> 字体问题？</p><p>因为，<code>echarts</code> 是一个 <code>canvas</code>，只支持 <code>rem</code></p><p>所以，为写一个转换函数，将 <code>rem</code> 转为 <code>px</code></p><p>监听页面大小的时候，重新渲染 <code>echarts</code> 图层，那么 echarts 字体也会根据 <code>html</code> 的 <code>font-size</code> 进行计算</p><p>无限滚动？</p><p>使用插件 <code>vue-seamless-scrool</code> 文字抖动，且出现滚动久了就卡顿</p><p>使用 <code>requestAnimationFrame</code> 进行渲染，解决文字抖动 与 卡顿</p>',44),r=[i];function p(l,t){return o(),c("div",null,r)}const n=e(a,[["render",p],["__file","2025前端最新面试题-优化篇.html.vue"]]);export{n as default};

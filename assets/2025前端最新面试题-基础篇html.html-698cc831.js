import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as n,c as d,a as l,b as e,d as t,e as a}from"./app-4bc45b34.js";const s="/DaMaiCoding-Note/assets/image-20230116223029019-1675344150157-73.39969d4e-55e69191.png",c={},p=a('<h1 id="_2025前端最新面试题-基础篇html" tabindex="-1"><a class="header-anchor" href="#_2025前端最新面试题-基础篇html" aria-hidden="true">#</a> 2025前端最新面试题-基础篇html</h1><h2 id="_1-dom-对象有哪些-文档对象模型" tabindex="-1"><a class="header-anchor" href="#_1-dom-对象有哪些-文档对象模型" aria-hidden="true">#</a> 1. DOM 对象有哪些？ (文档对象模型)</h2><ul><li>document (文档对象)</li><li>element (HTML 元素, 节点对象)</li><li>event (事件对象)</li><li>attribute (表示 HTML 属性)</li></ul><h2 id="_2-bom-对象有哪些" tabindex="-1"><a class="header-anchor" href="#_2-bom-对象有哪些" aria-hidden="true">#</a> 2. BOM 对象有哪些？</h2><ul><li>window</li><li>location</li><li>navigator</li><li>screen</li><li>history</li><li>console</li></ul>',5),h={href:"https://juejin.cn/post/7116113618550292516#heading-1",target:"_blank",rel:"noopener noreferrer"},u=l("h2",{id:"_3-html-语义化是什么-有哪些标签",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_3-html-语义化是什么-有哪些标签","aria-hidden":"true"},"#"),e(" 3. HTML 语义化是什么, 有哪些标签?")],-1),_=l("p",null,"HTML 语义化标签就是用于方便搜索引擎解析, 也就是 SEO",-1),f=l("p",null,"语义化标签 就是 用正确的标签做正确的事",-1),g=l("p",null,[l("strong",null,"语义化标签有哪些?")],-1),m=l("p",null,"有很多, 基本不会问, 可能会问 HTML5 新增了哪些",-1),S={href:"https://blog.csdn.net/eeeecw/article/details/80591511",target:"_blank",rel:"noopener noreferrer"},b=a('<p>HTML5 新增语义化标签 footer、nav、header、article</p><h2 id="_4-块级标签、内联标签有哪些" tabindex="-1"><a class="header-anchor" href="#_4-块级标签、内联标签有哪些" aria-hidden="true">#</a> 4. 块级标签、内联标签有哪些?</h2><ol><li><p>CSS 规范规定，每个元素都有 display 属性，确定该元素的类型，每个元素都有默认的 display值， 比如 div 默认 display 属性值为 “<strong>block</strong>”，成为“块级”元素； span 默认 display 属性值为 “<strong>inline</strong>”，是“行内”元素。</p></li><li><p>行内元素有：<code>a span img input select strong</code>（强调的语气） 块级元素有：<code>div ul ol li dl dt dd h1 ~ h6 p</code></p></li></ol><h2 id="_5-defer-和-async-区别" tabindex="-1"><a class="header-anchor" href="#_5-defer-和-async-区别" aria-hidden="true">#</a> 5. defer 和 async 区别？</h2><p>html 文件都是按顺序执行的，script 标签中没有加 defer 和 async 时，浏览器在解析文档时遇到 script 标签就会停止解析, 阻塞文档解析，先加载JS文件，加载完之后立即执行，执行完毕后才能继续解析文档。</p><p>而在 script 标签中写入 defer 或者 async 时，就会使JS文件异步加载，即 html 执行到 script 标签时，JS加载和文档解析同时进行，</p><p>而 defer 则是JS加载完成后，在文档解析完成后执行JS脚本，而 async 是在JS加载完成后立即执行JS脚本，阻塞文档解析，</p><p>小结</p><ul><li>defer -&gt; js 加载 -&gt; 文档解析 -&gt; js 执行</li><li>async -&gt; js 加载 -&gt; js 执行 -&gt; 文档解析</li></ul><h2 id="_6-描述从输入-url-到页面展示的完整过程" tabindex="-1"><a class="header-anchor" href="#_6-描述从输入-url-到页面展示的完整过程" aria-hidden="true">#</a> 6. 描述从输入 url 到页面展示的完整过程</h2><p>步骤</p><ul><li>网络请求</li><li>解析</li><li>渲染</li></ul><p>网络请求</p><ul><li>DNS 查询 (得到 IP), 建立 TCP 连接 (三次握手)</li><li>浏览器发起 HTTP 请求</li><li>收到请求响应，得到 HTML 源代码</li></ul><p>继续请求静态资源</p><ul><li>解析 HTML 过程中，遇到静态资源还会继续发起网络请求</li><li>JS CSS 图片 视频等</li><li>注意：静态资源可能有强缓存，此时不必请求</li></ul><p>解析：字符串 -&gt; 结构化数据</p><ul><li>HTML 构建 DOM 树</li><li>CSS 构建 CSSOM 树 (style tree)</li><li>两者结合，形成渲染树 (render tree)</li></ul><blockquote><p>优化解析</p><ul><li>CSS 放在 <code>&lt;head&gt;</code> 中，不要异步加载 CSS</li><li>JS 放在 <code>&lt;body&gt;</code> 最下面 (或合理使用 defer async)</li><li><code>&lt;img&gt;</code> 提前定义 width height</li></ul></blockquote><p>渲染：Render Tree 绘制到页面</p><ul><li>计算各个 DOM 的尺寸、定位, 最后绘制到页面</li><li>遇到 JS 可能会执行 (参考 defer async)</li><li>异步 CSS、图片加载, 可能会触发重新渲染</li></ul><p>整个完整解析过程</p><figure><img src="'+s+'" alt="image-20230116223029019" tabindex="0" loading="lazy"><figcaption>image-20230116223029019</figcaption></figure><blockquote><p>总结</p><ul><li>网络请求：DNS 解析，HTTP 请求</li><li>解析：DOM 树，CSSOM 树，Render Tree</li><li>渲染：计算、绘制，同时执行 JS</li></ul></blockquote><h2 id="_7-重绘-repaint-重排-reflow-有什么区别" tabindex="-1"><a class="header-anchor" href="#_7-重绘-repaint-重排-reflow-有什么区别" aria-hidden="true">#</a> 7. 重绘 repaint 重排 reflow 有什么区别？</h2><p>动态网页，随时都会重绘、重排</p><ul><li>网页动画</li><li>Modal Dialog 弹窗</li><li>增加/删除一个元素，显示/隐藏一个元素</li></ul><p>重绘 repaint</p><ul><li>元素外观改变，如颜色、背景色</li><li>但元素的尺寸、定位不变，不会影响其他元素的位置</li></ul><p>重排 reflow</p><ul><li>重新计算尺寸和布局，可能会影响其他元素的位置</li><li>如元素高度增加，可能会使相邻元素位置下移</li></ul><p>区别</p><ul><li>重排比重绘要影响更大，消耗也更大</li><li>所以，要尽量避免无意义的重排</li></ul><p>减少重排的方法</p><ul><li>集中修改样式，或直接切换 css class</li><li>修改之前先设置 display: none, 脱离文档流</li><li>使用 BFC 特性，不影响其他元素位置（ BFC 内部不影响外部 ）</li><li>频繁触发 (resize scroll) 使用节流和防抖</li><li>使用 createDocumentFragment 批量操作 DOM</li><li>优化动画，使用 CSS3 和 requestAnimationFrame</li></ul><blockquote><p>注意：CSS3 动画 比 JS 动画更快，是因为 CSS3 触发了 GPU 加速</p><p>扩展：BFC</p><ul><li>Block Format Context 块级格式化上下文</li><li>内部的元素无论如何改变，都不会影响其他元素的位置</li></ul><p>触发 BFC 的条件</p><ul><li>根节点 <code>html&gt;</code></li><li>float: left/right</li><li>overflow: auto/scroll/hidden</li><li>display: inline-block/table/table-row/table-cell</li><li>display:flex/grid 的直接子元素</li><li>position: absolute/fixed</li></ul></blockquote>',36);function M(y,C){const i=o("ExternalLinkIcon");return n(),d("div",null,[p,l("p",null,[l("a",h,[e("BOM对象有哪些？你用过哪些？"),t(i)])]),u,_,f,g,m,l("p",null,[l("a",S,[e("什么是HTML语义化标签？"),t(i)])]),b])}const k=r(c,[["render",M],["__file","2025前端最新面试题-基础篇html.html.vue"]]);export{k as default};

import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-4bc45b34.js";const o={},t=e(`<h1 id="微信小程序-↵符号替换" tabindex="-1"><a class="header-anchor" href="#微信小程序-↵符号替换" aria-hidden="true">#</a> 微信小程序 ↵符号替换</h1><p>微信小程序，将下面文字以<code>↵</code>符号，进行分割，并统计分割后每个数组元素的文字个数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">&#39;n. 墓穴，坟墓；死亡↵adj. 重大的；严肃的；黯淡的↵vt. 雕刻；铭记&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>很可惜，微信小程序、H5 无法直接获取<code>↵</code>符号，也即</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;↵&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// [&quot;n. 墓穴，坟墓；死亡↵adj. 重大的；严肃的；黯淡的↵vt. 雕刻；铭记&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，我们需要先把<code>↵</code>符号进行编码</p><ol><li>使用<code>encodeURIComponent</code>对内容进行编码，得知<code>↵</code>编码为<code>%E2%86%B5</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> encode <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">&#39;↵&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span>
<span class="token comment">// %E2%86%B5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>把需要替换的所有文字使用 <code>encodeURIComponent</code> 进行编码，然后把<code>%E2%86%B5</code>替换掉你需要的内容</p></li><li><p>把替换掉的内容使用<code>decodeURIComponent</code>解码重新解码回来</p></li></ol><p>整体操作函数，比如我需要将<code>↵</code>替换为<code>,</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">replaceNewlineSymbol</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> encodeText <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token comment">// encodeURIComponent 对传入字段进行编码</span>
  <span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;%E2%86%B5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span> <span class="token comment">// RegExp 对象用于将文本与一个模式匹配，g 为全局匹配的意思</span>
  <span class="token keyword">const</span> newText <span class="token operator">=</span> encodeText<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regexp<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token comment">// replace 替换，意思是根据正则规则将 &#39;%E2%86%B5&#39; 全局替换为 ‘,’</span>
  <span class="token keyword">return</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>newText<span class="token punctuation">)</span> <span class="token comment">// decodeURIComponent 对替换后的字段进行解码</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">&#39;n. 墓穴，坟墓；死亡↵adj. 重大的；严肃的；黯淡的↵vt. 雕刻；铭记&#39;</span>
<span class="token function">replaceNewlineSymbol</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token comment">// &#39;n. 墓穴，坟墓；死亡,adj. 重大的；严肃的；黯淡的,vt. 雕刻；铭记&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结</p><blockquote><ol><li>js 无法直接解析<code>↵</code>符号，所以无法直接将<code>↵</code>符号进行替换</li><li>通过<code>encodeURIComponent</code> 将文本编码，并将<code>↵</code>的编码<code>%E2%86%B5</code>进行替换，替换后再通过<code>decodeURIComponent</code>解码回来</li></ol></blockquote>`,13),c=[t];function p(l,i){return s(),a("div",null,c)}const u=n(o,[["render",p],["__file","微信小程序 ↵符号替换.html.vue"]]);export{u as default};

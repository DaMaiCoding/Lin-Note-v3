import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as s,b as n,d as i,e as a}from"./app-51a3eee2.js";const l={},u=a(`<h1 id="编程基础知识" tabindex="-1"><a class="header-anchor" href="#编程基础知识" aria-hidden="true">#</a> 编程基础知识</h1><h2 id="什么是面向对象-oop" tabindex="-1"><a class="header-anchor" href="#什么是面向对象-oop" aria-hidden="true">#</a> 什么是面向对象 (OOP)</h2><p>1、自己买材料，肉，鱼香肉丝调料，蒜苔，胡萝卜等等然后切菜切肉，开炒，盛到盘子里</p><p>2、去饭店，张开嘴：老板！来一份鱼香肉丝！</p><p><strong>看出来区别了吗？1是面向过程，2是面向对象</strong></p><h2 id="console-timeend" tabindex="-1"><a class="header-anchor" href="#console-timeend" aria-hidden="true">#</a> console.timeEnd()</h2><p>这个 API 能够给出, 程序执行到当前位置所需时间</p><h2 id="重置默认样式的方法" tabindex="-1"><a class="header-anchor" href="#重置默认样式的方法" aria-hidden="true">#</a> 重置默认样式的方法</h2><p>安装 清除默认样式 css</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i <span class="token parameter variable">-S</span> reset.css
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直接在入口文件引入即可</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// mian.ts</span>
<span class="token keyword">import</span> reset<span class="token punctuation">.</span>css
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="日期工具" tabindex="-1"><a class="header-anchor" href="#日期工具" aria-hidden="true">#</a> 日期工具</h2><p>先直接按照 dayjs 日期工具</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i <span class="token parameter variable">-S</span> dayjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="commonjs-规范-与-es模块规范" tabindex="-1"><a class="header-anchor" href="#commonjs-规范-与-es模块规范" aria-hidden="true">#</a> CommonJS 规范 与 ES模块规范</h2><p>CommonJS 规范</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入</span>
<span class="token keyword">const</span> alias <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./number.js&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// 导出 number.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> alias<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES模块 规范</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入</span>
<span class="token keyword">import</span> alias <span class="token keyword">from</span> <span class="token string">&quot;./alias.js&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 导出</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">alias</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;alias&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件化优点" tabindex="-1"><a class="header-anchor" href="#组件化优点" aria-hidden="true">#</a> 组件化优点</h2><ul><li>便于 维护、复用</li></ul><h2 id="柯里化" tabindex="-1"><a class="header-anchor" href="#柯里化" aria-hidden="true">#</a> 柯里化</h2><p>柯里化的目的在于, 将重复参数进行复用</p><p>普通函数转为柯里化函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">curry</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">nest</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// fn.length表示函数的形参个数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 当参数接收的数量达到了函数fn的形参个数，即所有参数已经都接收完毕则进行最终的调用</span>
      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 参数还未完全接收完毕，递归返回judge，将新的参数传入</span>
      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">nest</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 下面的写法, 结果就相反</span>
        <span class="token comment">// return nest(arg, ...args);</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">addNum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> addCurry <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>addNum<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addCurry</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),r={href:"https://zhuanlan.zhihu.com/p/120735088#:~:text=%E4%BB%80%E4%B9%88%E6%98%AF%E6%9F%AF%E9%87%8C%E5%8C%96,%E5%9C%A8%E4%BD%BF%E7%94%A8JavaScript%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%9C%89%E4%B8%80%E7%A7%8D%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%9A%84%E6%80%9D%E6%83%B3%EF%BC%8C%E8%80%8C%E6%8F%90%E5%88%B0%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%EF%BC%8C%E4%B8%80%E5%AE%9A%E7%BB%95%E4%B8%8D%E5%BC%80%E4%B8%80%E4%B8%AA%E6%A6%82%E5%BF%B5%EF%BC%8C%E9%82%A3%E5%B0%B1%E6%98%AF%E6%9F%AF%E9%87%8C%E5%8C%96%E3%80%82",target:"_blank",rel:"noopener noreferrer"},d=a(`<h2 id="使用-javascript-判断值为空-但可以为-0" tabindex="-1"><a class="header-anchor" href="#使用-javascript-判断值为空-但可以为-0" aria-hidden="true">#</a> 使用 javascript 判断值为空, 但可以为 0</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2333&#39;</span><span class="token punctuation">)</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码的核心" tabindex="-1"><a class="header-anchor" href="#代码的核心" aria-hidden="true">#</a> 代码的核心</h2><p>不管是哪种带逻辑的代码的核心，不管什么语言都是三种执行顺序</p><ul><li>判断</li><li>循环</li><li>顺序执行</li></ul><h2 id="一些插件使用的注意事项" tabindex="-1"><a class="header-anchor" href="#一些插件使用的注意事项" aria-hidden="true">#</a> 一些插件使用的注意事项</h2><p>mock.js 只能劫持 XMLHttpRequest，不能劫持 fetch</p>`,7);function k(v,m){const e=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("[Javascript中的函数柯里化使用)]("),s("a",r,[n("https://zhuanlan.zhihu.com/p/120735088#:~:text=什么是柯里化,在使用JavaScript编写代码的时候，有一种函数式编程的思想，而提到函数式编程，一定绕不开一个概念，那就是柯里化。"),i(e)]),n(" 柯里化是编程语言中的一个通用的概念（不只是Js，其他很多语言也有柯里化），是指把接收多个参数的函数变换成接收单一参数的函数，嵌套返回直到所有参数都被使用并返回最终结果。)")]),d])}const E=t(l,[["render",k],["__file","编程基础知识.html.vue"]]);export{E as default};

import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as n,c as s,a as p,b as e,d as i,e as a}from"./app-da553741.js";const c={},l=a('<h1 id="_2025前端最新面试题-简历篇" tabindex="-1"><a class="header-anchor" href="#_2025前端最新面试题-简历篇" aria-hidden="true">#</a> 2025前端最新面试题-简历篇</h1><h2 id="个人信息" tabindex="-1"><a class="header-anchor" href="#个人信息" aria-hidden="true">#</a> 个人信息</h2><ul><li>年限</li><li>性别</li><li>学历</li><li>电话</li><li>邮箱</li><li>岗位</li></ul><p>照片啥的，就不要放了</p><h2 id="职业技能" tabindex="-1"><a class="header-anchor" href="#职业技能" aria-hidden="true">#</a> 职业技能</h2><p>可以根据下面的风格进行编写你的职业技能，也可以根据情况进行删减，增加</p><p>注意，职业技能你得写你熟悉的，不熟悉的不要写上去，要么就把不熟悉，饿补一下</p><p>而且，你写的职业技能很大可能会被面试官进行提问，当然大部分提问都是与项目相关的</p><p>如果，你遇见的是纯问八股文的，那么他根据你的职业技能提问，几率很大</p><p>你的职业技能，要按岗位 JD 描述，进行修改，保证契合程度</p><p>[ 简介模板 ]</p><p>**HTML/CSS：**HTML5、CSS3、Less, rem、em、em、vw、vw、vh、媒体查询</p><p>**JavaScript/TypeScript：**JavaScript, TypeScript、ES6+, Promiise async/await、Proxy、模块化等</p><p>**网络请求/协议：**HTTP、HTTPS、TCP、UDP、IP,同源策略,跨域请求,AJAX、 Fetch、Axios、HTTP缓存策略、CDN优化</p><p><strong>Vue.js:</strong> Vue2、Vue3、Vue Router、Vuex/Pinia、CompositionAPI、Vue SSR、 Nuxt.js</p><p><strong>React.js:</strong> React16+、React Router, Hooks API、RTK(Redux Toolkit)、React SSR、Next.js</p><p>**可视化开发：**Canvas、SVG、Echarts</p><p>**微信小程序/跨平台开发：**原生小程序开发、uniapp、taro</p><p>**构建工具：**Webpack、Gulp、Vite、Rollup,自定义Plugin、Loader</p><p>**源代码管理：**Git、Git Flow、Feature Branch工作流</p><p>**服务器开发：**Node.js、Express、Koa框架,MySQL、MongoDB等数据库</p><p>**Linux服务器：**Linux服务器(如CentOS)、pm2、前端项目部不署、处理跨域、Nginx 进行反向代理和负载均衡、Jenkins、Docker、Kubernetes(k8s)实现CI/CD</p><p>**其他专业技能：**前端性能优化技巧、提升网站SEO、国际化、常见的设计模式、数据结 构与算法</p>',23),u={href:"https://juejin.cn/user/360295544403838",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/coderwhy",target:"_blank",rel:"noopener noreferrer"},h=a('<h2 id="工作经历" tabindex="-1"><a class="header-anchor" href="#工作经历" aria-hidden="true">#</a> 工作经历</h2><p>工作经历应该是你项目经历的一种总结</p><h2 id="项目经验" tabindex="-1"><a class="header-anchor" href="#项目经验" aria-hidden="true">#</a> 项目经验</h2><p>[ 核心要点 ]</p><p><strong>1. 团队贡献</strong></p><p>你看你为上家公司做了什么什么业务，什么功能，是把这个只是能表达你做业务的能力</p><p>但是，如果是你为团队做了什么东西，那么你这个能力是不是也可以带给现有团队呢~</p><p>所以，这就是一个核心要点</p><p>比如，你为团队封装工具 CLI、UI组件库、其他工具库、项目架构、代码规范、自动化部署、团队培训</p><p><strong>2. 项目亮点/难点</strong></p><p>基本上面试都会问这个，面试问这个就是面试官不知道，你熟悉什么，想让你自己找一个给他问</p><p>这就是你引导面试官到自己熟悉领域的机会，当然啦，你的项目难点要契合对方公司的项目</p><p>不然，可能他自己都不懂，也就不会问你了</p><p>比如，性能优化、界面适配、浏览器兼容性、低代码平台、SSR SEO、技术转型、BFF、Redis</p><p><strong>3. 用户体验</strong></p><p>量化一些数值：界面性能提升、用户体验提升、团队沟通效率、开发效率提升</p><p>技术是为产品服务的</p><p><strong>4. 弱化业务/技术栈</strong></p><p>尽量少去（删除）强调具体的业务功能，尽量少强调常见的技术栈（Router、Pinia）</p><p>[ 推荐写法 ]</p><p>简历推荐写 3个项目经验，项目经验与公司匹配即可，且能突出项目亮点/难点即可，保持简历 2 页内即可</p><p>[ 在当前项目中没用过的东西可以写吗？]</p><ol><li>在别的项目中用过，这个项目没有用，一定可以写</li><li>在自己课下学习过，但是没有在实际项目中应用，一定可以写</li></ol><p>[ 学到什么程度才算，学会一个技术 ]</p><ol><li>会用这个技术（会用常用 API）</li><li>会用某个技术的所有 API</li><li>理解其原理</li><li>读过其源码</li><li>能定制过框架</li></ol><p>[ 如果被问到，某个不熟悉的 API，或者问更深入的问题不会，怎么办 ]</p><p>说当时公司需要做这个业务，所以去学习这个技术，虽然我 这个API 因为业务问题没用过，但是如果贵公司需要这个的东西</p><p>我也可以快速上手，因为我已经用过了这个东西，相关 API 只要学习一下，就能快速开展业务了</p><p>[ 问到我根本不会的问题，怎么办 ]</p><p>[经验模板]</p><p>网易云音乐数据服务 2023/08-至今</p><p>网易云音乐数据服务中心是一个专为前端应用设计的BFF(Backend for Frontend)服务层,负责处理来自网易云音乐各种数据源的请求,为网页和移动应用提供定制化、高效的 API。项目主要解决前端在数据处理和API调用的复杂性,通过优化数据传输和处理逻辑,提高用户界面的响应速度和整体用户体验。</p><p>技术栈:Node.js/Express, Redis, Docker, Nginx, Elasticsearch,Kibana</p><p>项目核心职责:带领团队使用Express设计和开发Node.jsBFF架构,快速搭建 RESTful API。</p><p>定制化API:为前端特定需求定制API,减少了前端数据处理代码量约40%,简化了前端的业务逻辑实现,使前端开发更加高效。</p><p>性能优化:通过引入Redis缓存,热门请求的响应时间从平均350毫秒减少到50毫秒,提高了超过600%的响应速度,显著增强用户交互体验。</p><p>安全性设计:在BFF层加强安全措施,如API请求的认证和授权,防止恶意访问和数据泄露。</p><p>日志与监控:部署了Elasticsearch和Kibana进行日志分析,能够快速定位并响应系统故障,确保了系统的稳定运行。</p><p>自动化部署:利用Docker和CI/CD流程,将新版本部署时间缩短了75%,确保了业务发布开发高效性。</p><p>用户体验:通过用户调研和前端反馈,优化API的数据结构和调用用流程,用户满意度提高了30%,前端开发者的工作效率提升了25%。</p><p>网易云音乐-PCWeb音乐项目 2023/02-至今</p><p>作为前端核心开发者,负责网易云的核心模块开发,采用React和TypeScript实现了SSR技术优化SEO和用户体验,显著提高了市场竞争力和用户满意度。</p><p>技术栈:React18, React Router, TypeScript, Redux Toolkit, Ant Design, styled-components, Next.js, Jenkins, Nginx</p><p>技术标准制定:制定React和TypeScript编码标准,监督并审查代码CodeRewiew以确保团队遵循这些标准。</p><p>团队培训与成长:定期举办技术分享会,提升团队成员在React和TypeScript上的技能和协作效率。</p><p>负责团队核心功能:包括实现首页功能,包括利用HTML5的AudioAPI开发高效的音乐播放功能,包括播放、暂停、切换歌曲和调整进度等。开发动态歌词匹配和滚动显示工具,增强听歌体验。</p><p>代码性能优化:负责前端代码优化,实现懒加载和代码拆分,CDN、浏览器缓存策略等,减少加载时间和运行资源消耗。</p><p>BFF中间层:负责定制和实施BFF的架构和设计标准,简化前端逻辑辑,优化性能提升。</p><p>自动化部署流程:优化Jenkins自动化部署流程,实现代码快速部署至生产环境,减少部署错误。</p><p>SEO和服务器端渲染:通过Next.js实现SSR,优化SEO表现和页面加载速度,首屏渲染时间降到1s以下,并提高搜索引擎排名。</p><p>用户体验提升:通过用户反馈收集和行为分析,用户停留时间增加了20%,并且页面的跳出率降低了15%</p><p>弘源管理系统-高效的企业级后台管理解决方案 2022/06 - 2023/02</p><p>作为前端技术负责人,领导了从Vue到React的技术转型,全面负责责设计和实施了一套高效的企业级后台管理系统。此系统服务于多个内部项目,并为公司提供了一套通用且可扩展的后台管理平台开发解决方案。通过封装通用组件库和开发CLI工具,前端团队能够迅速开发新的后台系统并有效维护现有超过10个管理系统。</p><p>技术栈:React18, Redux Toolkit, React Router, Axios, Ant Design, TypeScript, Sass, Jenkins, Docker, Nginx</p><p>React技术推广与实施:作为前端负责人,负责技术选型和架构设计,引入React和TypeScript作为开发的主要技术栈,提高了系统的可维护性和扩展性。</p><p>团队技术培训:组织React和TypeScript的内部培训,确保团队成员能够快速掌握新技术并应用于项目开发。</p><p>组件库开发与封装:使用Ant Design为基础,开发并定制了一套符合企业需求的 React组件库,包括表格、表单、数据展示组件等,大幅提升开发效率和产品一致性。</p><p>动态系统构建:实现基于配置的动态构建系统,快速生成后台管理系统的UI界面,支持高度定制化的布局和交互设计。</p><p>RBAC权限管理:基于Redux Toolkit实现的权限管理系统,支持动态权限控制,提高系统的安全性和灵活性。</p><p>自动化测试与持续集成:通过Jenkins和Docker实现自动化测试和持续集成/持续部署(CI/CD),确保开发过程的高效和代码质量。</p><p>用户体验显著提升:通过优化前端性能和改进用户交互设计,首屏加载时间减少50%,用户操作响应时间优化30%。</p><p>开发效率和资源优化:通过高度复用的组件库和自动化工具,提升了开发速度和质量,减少了开发周期和成本,显著减少了加班需求。</p><p>星客SC-高端住宿预订平台前端重构 2021/11-2022/06</p><p>在&quot;星舍SC&quot;项目中,作为前端组长,带领团队完成了从jQuery技术栈向React技术栈转型。全面负责技术选型和架构设计,主导了平台的前端重构,引入了React框架和服务器 端渲染等技术,极大地提升了项目的可维护性和市场竞争力。</p><p>技术栈:React18, React Router, Redux ToolKit(RTK), axios, AntDesign, Material Ul, styled-components, Jenkins, Nginx</p><p>React推广与实施:选择React作为新的前端框架对原有jQuery项目进行重构,引导技术转型。</p><p>统一代码规范:制定严格的React代码规范和最佳实践,包括组件规范、数据请求统一管理,确保团队高效协作。</p><p>团队技术培训:组织React培训,帮助团队从jQuery和Vue平滑过渡到React。</p><p>项目管理:指导前端团队的日常工作,监督项目进度,确保按时交付高质量产品。</p><p>跨部门合作:与设计师、产品经理及后端团队紧密合作,确保前端实现符合公司目标和用户需求。</p><p>组件和Hooks封装:封装复用组件和内部Hooks工具库(如useAuith, useFormData, useDebounce),提升开发效率和代码质量。</p><p>国际化和本地化:实现应用的多语言支持,利用i18n库管理文本资源,支持全球用户。</p><p>自动化部署流程:利用Jenkins优化自动化构建和部署流程,缩短开发到部署周期。</p><p>性能与SEO优化:实施SSR(Next.js)优化SEO和页面加载速度,显著提升网站排名和访问速度。</p><p>用户体验提升:优化首屏加载和响应速度,将页面响应时间,从2.5秒降至1秒以下。</p><p>虾米音乐-小程序项目 2021/03 - 2021/11</p><p>作为项目开发负责人,负责设计和开发了虾米音乐播放小小程序。该项目不仅提供基本的音 乐播放功能,还集成了云开发技术。另外,在开发过程中为公司定制开发了Event-Store 小程序状态管理工具,大大提升了项目的开发效率。</p><p>技术栈:小程序原生开发,Cloud云开发,封装Event-store,@vant/weapp, Prettier, ESLint</p><p>定制全局状态管理工具:开发名为event-store的状态管理库,基于Proxy和 Reflect,通过观察者模式和订阅者模式开发数据的响应式和数据的统一管理。</p><p>启动性能优化:通过代码包体积优化、代码注入优化、首屏渲染优化,降低首次加载和启动时间约32%。</p><p>运行时性能优化:合理使用setData、进行渲染性能优化、页面切换优化、资源加载优化、内存优化和防抖节流优化,页面更加流畅,提升用户留存率。</p><p>小程序云开发:利用小程序云技术,实现数据存储、用户认证和文件存储,简化后端开发和运维。</p><p>用户参与度提升:通过优化用户界面和个性化功能,显著提升用户参与度和用户粘性。</p><p>优化效率提升:性能优化措施使应用性能提升超过30%,用户满意度增加55%。</p><p>提升团队开发效率:状态管理工具封装提升企业所有的小程序类型项目的开发效率30%以上。</p><p>低代码商城系统平台(LowCode Mall System Platform) 2020/01-2021/03</p><p>低代码商城系统平台是一个为企业快速定制H5/小程序商城系统的前端开发平台。该平台通过预定义的组件库和可视化拖拉拽界面,使产品团队能够自主设计和部署商城应用,极大减少了开发和沟通成本。通过这种方式,企业能够在短时间内为客户提供定制化的商场应用,同时保持高度的灵活性和可扩展性。</p><p>技术栈:Vue3、Vue Router、Pinia、Element-plus、axios、vuedraggable Swiper、sass</p><p>项目核心:使用Vue3和Element-Plus构建可交互的用户界面。现拖拉拽功能,允许用户自定义页面布局和组件配置。</p><p>用户体验设计:确保拖拉拽界面直观易用,使非技术人员也能轻松操作,快速生成商城页面。</p><p>组件库的构建和维护:开发和维护覆盖商城系统核心功能的组件库,如商品展示、商品详情、购物车、订单处理等。</p><p>提高开发效率:通过低代码平台,产品团队无需开发人员介入即可设计和部署商城系统,减少开发时间和成本80%。</p><p>减少沟通成本:通过可视化配置简化客户、产品和开发之间的沟通,减少需求误差和频繁变更。</p><p>通用组件的适应性:设计灵活的组件库满足不同客户需求,适用于多种商城场景。</p><p>系统性能优化:保持系统即使在复杂布局和大量组件的情况下也能保持良好的性能和响应速度。</p><p>弘源后台管理系统-多后台管理系统的统一解决方案 2019/03 - 2020/01</p><p>作为前端负责人,负责设计和实施了一套多功能的后台管理系统,这套系统不仅服务于单一项目,更为公司提供了一套通用的、高效的后台管理平台开发解决方案。通过封装通用UI组件库和开发CLI工具,前端团队能迅速开发新的后台系统,并有效维护现有10+个管理系统。</p><p>技术栈:Vue3, Pinia, Vue Router, Axios, Element Plus, Echart,Vite, TypeScript, JavaScript, Sass, Jenkins, Nginx</p><p>技术领导:作为前端组长,负责技术决策,包括选型、架构设计,指导和管理前端开发团队,安排任务,监督项目进度,确保按时高质量完成。</p><p>高度定制的Ul组件库:对Element Plus进行深度定制和封装,开发企业级UI组件库, 灵活应用于多个后台管理系统,提升开发和维护效率。</p><p>动态系统构建:开发基于配置的动态构建系统,快速生成后台管理系统UI界面,包括 表格、查询、数据模态窗口等,缩短开发周期。</p><p>全功能的CLI工具:&#39;coderwhy&#39;CLI工具支持一键生成项目、组件、页面、store模块等,标准化项目架构,加速新项目启动。</p><p>RBAC权限管理:实现基于角色的权限管理系统,支持角色定义和权限分配,动态控制界面元素和操作权限,增强系统安全性。</p><p>报表与数据分析:整合Echarts进行数据可视化,提供实时数据报表,辅助决策支持,提升管理层决策效率。</p><p>持续集成交付:通过Jenkins实现自动化持续集成流程CI/CD,确保代码质量和快速迭代。</p><p>开发效率提升:通过部署CLI工具和UI组件库,显著降低项目开发和维护成本,提升决策速度。</p><p>人员资源优化:组件库和CLI工具使用使前端团队效率提升2倍,减少20%加班需求, 降低项目开发成本。</p><p>弘源旅途-H5民宿预订平台 2018/07 - 2019/03</p><p>作为核心前端开发者,负责设计和实现&quot;弘源旅途&quot;民宿预订平台的H5网站。这个项目的目标是提供一个直观、响应式的用户界面,使用户能够轻松浏览和预订全国各地的民宿。</p><p>技术栈:Vue2,Vuex,Vue Router,Axios,Mock数据,百度API, Prettier, ESLint, Commitizen, Commitlint, husky</p><p>项目核心:利用Vue2构建高性能SPA,实现流畅用户体验和即时页面面响应。</p><p>统一代码规范:通过EditorConfig, Prettier, ESLint, Commitizen,Commitlint, husky制定统一代码规范,提高代码质量。</p><p>界面适配优化:进行详尽的响应式设计和测试,确保在不同设备上页面的一致性和适配。</p><p>性能优化:采用防抖节流优化搜索框和滚动监听,使用虚拟列表和懒加载技术优化民宿列表,加快首页加载速度。</p><p>自动化部署与持续集成:实施Jenkins自动化部署和持续集成流程,确保代码质量和快速迭代。</p><p>用户满意度提升:通过用户反馈和行为分析不断优化用户界面和交了互流程,用户满意度提升20%。</p><p>访问量与转化率提升:通过优化SEO和页面加载速度,平台日均访问量增加30%,预订转化率提高15%。</p><h2 id="注意细节" tabindex="-1"><a class="header-anchor" href="#注意细节" aria-hidden="true">#</a> 注意细节</h2><ol><li>简历长度：尽量保持在 2~3 页（项目经验写 3~4 个即可）</li><li>重点一：整个简历要和投递的岗位契合、匹配（技能、业务）</li><li>重点二：尽量突出自己的亮点（你有，别人没用）</li><li>简历之外，你需要做的：对自己的简历的所有细节，了如指掌！</li></ol>',119);function R(S,x){const t=r("ExternalLinkIcon");return n(),s("div",null,[l,p("p",null,[e("**个人博客：**"),p("a",u,[e("https://juejin.cn/user/360295544403838"),i(t)])]),p("p",null,[e("**Github：**"),p("a",d,[e("https://github.com/coderwhy"),i(t)])]),h])}const C=o(c,[["render",R],["__file","2025前端最新面试题-简历篇.html.vue"]]);export{C as default};

import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as l,c as e,e as o}from"./app-da553741.js";const t={},a=o('<h1 id="_2025前端最新面试题-安全篇" tabindex="-1"><a class="header-anchor" href="#_2025前端最新面试题-安全篇" aria-hidden="true">#</a> 2025前端最新面试题-安全篇</h1><h2 id="_1-你知道哪些前端攻击-该如何预防" tabindex="-1"><a class="header-anchor" href="#_1-你知道哪些前端攻击-该如何预防" aria-hidden="true">#</a> 1. 你知道哪些前端攻击？该如何预防？</h2><p>XSS</p><ul><li>Cross Site Script 跨站脚本攻击</li><li>手段：黑客将 JS 代码 插入到网页内容中，渲染时执行 JS 代码</li><li>预防：特殊字符替换（前端或者后端），如 <code>&lt;</code> <code>&gt;</code> 替换成 <code>&amp;lt</code> <code>&amp;gt</code></li><li>Vue、React 默认屏蔽了 xss 攻击</li><li>但是 Vue (v-html)、React (dangerouslySetInnerHTML) 会导致 xss 攻击，所以尽可能不要使用这两个</li></ul><p>CSRF</p><ul><li>Cross Site Request Forgery 跨站请求伪造</li><li>手段：黑客诱导用户去访问另一个网站的接口，伪造请求</li><li>预防：严格的跨域限制 + 验证码机制</li><li>axios 默认做了 CSRF 攻击的措施</li></ul><p>详细过程</p><ul><li>用户登录了 A 网站，有了 cookie</li><li>黑客诱导用户到 B 网站，并发起 A 网站的请求</li><li>A 网站的 API 发现有 cookie, 认为是用户自己操作的</li></ul><p>SCRF 预防手段</p><ul><li>严格的跨域请求限制，如判断 referrer (请求来源)</li><li>为 cookie 设置 SameSite, 禁止跨域传递 cookie</li><li>关键接口使用短信验证码</li></ul><p>点击劫持</p><ul><li>Click Jacking</li><li>手段：诱导界面上蒙一个透明的 iframe, 诱导用户点击</li><li>预防：让 iframe 不能跨域加载 (Response headers 设置 X-Frame-Options: sameorigin)</li></ul><blockquote><p>总结：前端攻击有哪些</p><ul><li>XSS</li><li>CSRF</li><li>SCRF</li><li>点击劫持</li></ul><p>关于前端、后端安全或者其他校验等，前后端都要一起做，即使做重复了，也要做</p></blockquote>',13),c=[a];function r(s,_){return l(),e("div",null,c)}const u=i(t,[["render",r],["__file","2025前端最新面试题-安全篇.html.vue"]]);export{u as default};

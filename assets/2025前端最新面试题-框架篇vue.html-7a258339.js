import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-da553741.js";const i="/DaMaiCoding-Note/assets/image-20240509192729016-69b8a440.png",u="/DaMaiCoding-Note/assets/vuex-1723558840837-3-804b3f17.png",r={},d={id:"_2025前端最新面试题-框架篇vue-md",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_2025前端最新面试题-框架篇vue-md","aria-hidden":"true"},"#",-1),v={href:"http://xn--2025-vue-737m441nu9cqucqvcy99jzwc0s7gib0bqte.md",target:"_blank",rel:"noopener noreferrer"},m=e('<h2 id="_1-vue2、vue3-生命周期及其钩子函数相关面试题" tabindex="-1"><a class="header-anchor" href="#_1-vue2、vue3-生命周期及其钩子函数相关面试题" aria-hidden="true">#</a> 1. Vue2、Vue3 生命周期及其钩子函数相关面试题</h2><figure><img src="'+i+`" alt="image-20240509192729016" tabindex="0" loading="lazy"><figcaption>image-20240509192729016</figcaption></figure><p>Vue2、Vue2 从整体上来说都是 8个 生命周期，网上也有很多这么说，但是真是这样吗？稍后会讲到的</p><p>左边 Vue2 - 右边 Vue3 <code>before（在 ... 之前）</code></p><p>创建前 -&gt; 创建 <code>beforeCreate</code> -&gt; <code>created</code> <code>beforeCreate</code> -&gt; <code>created</code></p><p>挂载前 -&gt; 挂载 <code>beforeMount</code> -&gt; <code>mounted</code> <code>beforeMount</code> -&gt; \`\`mounted<code></code></p><p>更新前 -&gt; 更新 <code>beforeUpdated</code> -&gt; <code>update</code> <code>beforeUpdated</code> -&gt; <code>update</code></p><p>销毁前 -&gt; 销毁 <strong><code>beforeDestroy</code></strong> -&gt; <strong><code>destroy</code></strong> <strong><code>beforeUnmount</code></strong> -&gt; <strong><code>unmount</code></strong></p><p>Vue3 有两种 API，组合式API 和 选项式API</p><p>销毁阶段，Vue2的 <code>beforeDestroy</code>、<code>destroy</code> 替换成 <code>beforeUnmount</code>、<code>unmount</code></p><p>好，接下来我们来看下每个生命周期都干了什么？</p><p><strong>beforeCreate</strong></p><ul><li>创建一个空白的 Vue 实例</li><li>data method 尚未被初始化，不可使用</li></ul><p><strong>created</strong></p><ul><li>Vue 实例初始化完成，完成响应式绑定</li><li>data method 都初始化完成，可调用</li><li>尚未开始渲染模板</li></ul><p><strong>beforeMount</strong></p><ul><li>编译模板，调用 render 生成 vdom</li><li>还没有开始渲染 DOM</li></ul><p><strong>mounted</strong></p><ul><li>完成 DOM 渲染</li><li>组件创建完成</li><li>开始由 “创建阶段” 进入 “运行阶段”</li></ul><p><strong>beforeUpdate</strong></p><ul><li>data 发生变化之后</li><li>准备更新 DOM (尚未更新 DOM)</li></ul><p><strong>updated</strong></p><ul><li>data 发生变化，且 DOM 更新完成</li><li>不要在 updated 中修改 data，可能会导致死循环（ updata 中修改 data，重新 updata, 又修改 data ）</li></ul><p><strong>beforeDestroy/beforeUnmount</strong></p><ul><li>组件进入销毁阶段（尚未销毁，可正常使用）</li><li>可移除、解绑一些全局事件、自定义事件</li></ul><p><strong>destroy/unmounted</strong></p><ul><li>组件被销毁了</li><li>所有子组件也都被销毁了</li></ul><h2 id="_1-1-父子组件的生命周期执行顺序是怎么样的" tabindex="-1"><a class="header-anchor" href="#_1-1-父子组件的生命周期执行顺序是怎么样的" aria-hidden="true">#</a> 1.1 父子组件的生命周期执行顺序是怎么样的？</h2><p><code>created</code>、<code>mounted</code> 父子组件更新顺序 (创建、挂载阶段)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">created</span> <span class="token punctuation">(</span>父<span class="token punctuation">)</span>
<span class="token function">created</span> <span class="token punctuation">(</span>子<span class="token punctuation">)</span>
<span class="token function">mounted</span> <span class="token punctuation">(</span>子<span class="token punctuation">)</span>
<span class="token function">mounted</span> <span class="token punctuation">(</span>父<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>beforeUpdaate</code>、<code>update</code> 父子组件更新顺序 (更新阶段)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">beforeUpdaate</span> <span class="token punctuation">(</span>父<span class="token punctuation">)</span>
<span class="token function">beforeUpdaate</span>  <span class="token punctuation">(</span>子<span class="token punctuation">)</span>
<span class="token function">update</span> <span class="token punctuation">(</span>子<span class="token punctuation">)</span>
parent <span class="token function">update</span> <span class="token punctuation">(</span>父<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>beforeDestroy</code>、<code>destroy</code> 父子组件更新顺序 (销毁阶段)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">beforeDestroy</span> <span class="token punctuation">(</span>父<span class="token punctuation">)</span>
<span class="token function">beforeDestroy</span> <span class="token punctuation">(</span>子<span class="token punctuation">)</span> 
<span class="token function">destroy</span> <span class="token punctuation">(</span>子<span class="token punctuation">)</span>
<span class="token function">destroy</span> <span class="token punctuation">(</span>父<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>小结</strong></p><p>从上面的例子不难看出，父子组件的生命周期，都是呈现 父在外层，子在内层 的结构</p><p>父子组件生命周期执行过程中，无论是哪个生命周期，都是由<strong>父组件先开始，然后子组件再开始，直到子组件结束，父组件才结束</strong>。</p></blockquote><p>接下来我们来了解一个特殊的组件 <code> &lt;keep-alive&gt;</code>，缓存组件，最常见的就是在做页面权限控制（<code>keep-alive</code> 实际开发中运用场景）时，我们就需要定义这样一个缓存组件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;app-main&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view v<span class="token operator">-</span>slot<span class="token operator">=</span><span class="token string">&quot;{ Component, route }&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>transition name<span class="token operator">=</span><span class="token string">&quot;fade-transform&quot;</span> mode<span class="token operator">=</span><span class="token string">&quot;out-in&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span>component <span class="token operator">:</span>is<span class="token operator">=</span><span class="token string">&quot;Component&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;route.fullPath&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>keep-alive</code> 组件生命周期（<code>created</code>中只创建一次，不难理解，都被缓存了，当然就不会再被创建了嘛）</p><ul><li><code>onActivated</code> 缓存组件被激活</li><li><code>onDeactivated</code> 缓存组件被隐藏</li></ul><h2 id="_1-2-vue2、vue3、react-三者-diff-算法有何区别" tabindex="-1"><a class="header-anchor" href="#_1-2-vue2、vue3、react-三者-diff-算法有何区别" aria-hidden="true">#</a> 1.2 Vue2、Vue3、React 三者 diff 算法有何区别？</h2><p>diff 算法</p><ul><li><p>diff 算法很早就有</p></li><li><p>diff 算法应用广泛，例如 github 的 Pull Request 中的代码 diff</p></li><li><p>如果要严格 diff 两棵树，时间复杂度 O(n^3)，不可用</p></li></ul><p>Tree diff 的优化，优化后时间复杂度降为 O(n)</p><ul><li>只比较同一层级，不跨级比较</li><li>tag 不同则删除重建 (不再去比较内部的细节)</li><li>子节点通过 key 区分 (key 的重要性)</li></ul><p>学习技巧</p><ul><li>diff 算法非常复杂，不要深究细节</li><li>既然是三者的比较，说出他们最大的不同即可</li></ul><p>React diff - 仅右移</p><p>Vue2 - 双端比较（减少移动开销）</p><p>Vue3 - 最长递增子序列（减少 DOM 操作）</p><blockquote><p>diff 算法原理的核心在于 减少 DOM 操作</p></blockquote><p>连环问</p><p>Vue React 为何循环时必须使用 key ?</p><ul><li>vdom diff 算法会根据 key 判断元素是否删除？</li><li>匹配了 key, 则只移动元素 - 性能较好</li><li>为匹配 key, 则删除重建 - 性能较差</li></ul><h2 id="_2-组件传值" tabindex="-1"><a class="header-anchor" href="#_2-组件传值" aria-hidden="true">#</a> 2. 组件传值</h2><table><thead><tr><th>组件间传值方式</th><th>Vue2</th><th>Vue3</th></tr></thead><tbody><tr><td>父子传值</td><td>props/$emit</td><td>props/emit</td></tr><tr><td>兄弟传值</td><td>EventBus</td><td>mitt(官方插件) 是 eventbus 插件</td></tr><tr><td>多层传值</td><td>provide/inject（依赖注入）</td><td>provide/inject（依赖注入）</td></tr><tr><td>全局状态</td><td>vuex</td><td>pinia</td></tr></tbody></table><blockquote><p>获取子组件属性与方法：ref</p><p>获取父组件属性与方法：$parent</p></blockquote><h2 id="_3-vuex-与-pinia-的区别" tabindex="-1"><a class="header-anchor" href="#_3-vuex-与-pinia-的区别" aria-hidden="true">#</a> 3. Vuex 与 Pinia 的区别？</h2><p>vuex有5个属性而pinia只有3个，没有modules与mutation，而且 pinia 可以使用组合式API</p><ul><li>vuex： <ul><li>state: 存放数据源的地方</li><li>getters: 计算数据（相当于state的计算属性）</li><li>mutation：同步，唯一能修改state数据源的地方</li><li>actions：异步</li><li>modules：模块化</li></ul></li><li>pinia： <ul><li>state：数据存放地</li><li>actions：异步（副作用操作）</li><li>getters: 计算数据（相当于state的计算属性）</li></ul></li></ul><p>Pinia 体积更小（性能更好）。</p><p>Pinia 可以直接修改 state 里的数据，而 vuex 只能通过 mutation 中去修改。</p><p>虽然 Pinia 去除了 mutations，但为了兼容性，仍然可以使用 mutations 来修改 state</p><p><strong>【扩展】</strong></p><ol><li><p>Vuex 中 mutaion 和 action 区别？</p><ul><li><code>mutation</code> 是改变 Vuex store 中状态的同步方法，而 action 则是处理异步操作并最终通过 mutation 来改变状态的机制</li></ul></li><li><p>Vuex 如何实现持久化？ Pinia 如何实现持久化？</p><ol><li><p>Vuex</p><ul><li><p>本地缓存 <code>localStorage</code> (<code>localStorage</code> 大小不确定，<code>cookie</code> 4kB)</p></li><li><p>第三方插件 <code>vuex-persistedstate</code></p></li></ul></li><li><p>Pinia</p><ul><li><code>pinia-plugin-persistedstate</code></li></ul></li></ol></li><li><p>刷新页面 vuex 数据为什么会丢失？</p><p>在vue项目中使用vuex来做全局的状态管理，当刷新网页后，保存在vuex实例store里的数据会丢失。这是因为store里的数据是保存在运行内存中的，当页面刷新时，页面会重新加载vue实例，store里面的数据就会被重新赋值初始化。为了解决这个问题，可以将state的数据保存在 localstorage 中，这样即使页面刷新，数据也不会丢失。</p></li><li><p>Vuex 主要方法有哪些？</p><ul><li><code>state、getters、mutation、actions、modules</code></li></ul></li><li><p>讲一下 Vuex 单向数据流？ 或者说为什么 Vuex 他是一个单向数据流？</p><ul><li>组件 -&gt; dispatch -&gt; Actions -&gt; commit -&gt; Mutations -&gt; 修改 State -&gt; 组件渲染</li><li>因为，Vuex 就是设计了这样的一个数据流向，所以它是一个单向数据流</li></ul></li></ol><figure><img src="`+u+'" alt="vuex" tabindex="0" loading="lazy"><figcaption>vuex</figcaption></figure><blockquote><p>cookie: 4kb</p><p>localstory：永久存储</p><p>sessionStorage：浏览器关闭清空</p></blockquote><h2 id="_5-你封装过哪些组件" tabindex="-1"><a class="header-anchor" href="#_5-你封装过哪些组件" aria-hidden="true">#</a> 5. 你封装过哪些组件？</h2><p>因为公司要 UI 设计的一套弹窗组件</p><p>我们根据需求，二次封装 对话框组件、消息提示组件，除了样式外，就是需要可拖拽、有二次弹窗提示等功能</p><p>还有就是封装了，后台管理系统的搜索、筛选组件，通过 JSON 配置就能快速搭建</p><h2 id="_6-main-js-中-new-vue-vs-createapp" tabindex="-1"><a class="header-anchor" href="#_6-main-js-中-new-vue-vs-createapp" aria-hidden="true">#</a> 6. main.js 中 new Vue() vs createApp()？</h2><p><strong>API 变化</strong></p><p><code>new Vue()</code> 是基于 <code>Options API</code></p><p><code>createApp()</code> 是基于 <code>Composition API</code></p><p><strong>应用实例的隔离</strong></p><p><code>createApp()</code>创建的应用实例具有完全隔离的环境，每个实例拥有独立的响应式系统和全局属性</p><p><code>new Vue()</code>创建的实例不同，后者共享同一个全局上下文</p><h2 id="_7-vue3-为什么可以多个父节点" tabindex="-1"><a class="header-anchor" href="#_7-vue3-为什么可以多个父节点" aria-hidden="true">#</a> 7. Vue3 为什么可以多个父节点？</h2><p><code>Vue3</code> 可以有多个父节点，主要是因为引入了新的组件概念 - <code>Fragment</code></p><p><code>Fragment</code> 允许在一个模板中渲染多个根节点，这样就不需要为每个组件单独创建一个根节点，从而减少了不必要的标签元素。</p><h2 id="_8-平时用过-vue3-的-hooks-吗-有写过-hooks" tabindex="-1"><a class="header-anchor" href="#_8-平时用过-vue3-的-hooks-吗-有写过-hooks" aria-hidden="true">#</a> 8. 平时用过 Vue3 的 hooks 吗？有写过 hooks?</h2><p>我从两方面讲吧，一个从平时常见业务、特殊业务</p><p><strong>常见业务：</strong></p><p>hooks 在写 Vue3 的时候使用比较多，平时一些业务功能的话，比如防抖、节流、请求的错误重试、状态与请求一体化</p><p>就用一些开源的 hooks 库，比如 useVue，这样去实现</p><p><strong>特殊业务：</strong></p><p>比如，国际化、换肤、Echarts图表 这些功能就会使用自定义 hooks 进行实现</p><ul><li>分页 hooks，后台管理有很多 table，那不可避免就要写很多分页函数，封装一个分页 hooks 就不需要每次写一次分页功能</li><li>请求 hooks，减少</li></ul>',88),g={href:"https://juejin.cn/post/7299849645206781963?searchId=2024102723180924A990B2718890B97934",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"【注意】",-1),h=n("p",null,"hooks 导入对象，一般使用 toRefs 导出，这样做的原因是可以产生批量的可以解构的 Ref 对象，以免在解构返回值时失去响应性",-1),f={href:"https://vueuse.org/",target:"_blank",rel:"noopener noreferrer"},y=e('<h2 id="_9-watch-与-computed" tabindex="-1"><a class="header-anchor" href="#_9-watch-与-computed" aria-hidden="true">#</a> 9. watch 与 computed</h2><p><strong>watch 与 computed 的区别？</strong></p><ol><li>watch 支持异步，computed 不支持异步（⭐⭐⭐）</li><li>watch 监听一个值变化，执行其他操作，computed 监听依赖其他属性，再去执行其他操作</li><li>watch 可以接收新旧两个值</li><li>computed 属性是函数时，都有 get 和 set 方法，默认走 get 方法，get 必须有返回值</li><li>watch 没有缓存，computed 有缓存（⭐⭐⭐）</li></ol><p><strong>watch 与 computed 哪个先执行？</strong></p><p>要根据实际情况而定</p><p>一般情况下 computed 先于 watch 执行</p><p>当 watch 添加了 immediate: true 的情况下（在组件挂载完成后，会立即触发一次回调函数，而不管被监听的数据是否发生了变化），watch 先于 computed 先执行</p><p>用户交互导致数据变化的情况，先触发 watch 再触发 computed</p><p><strong>watch 和 computed，那个用的比较多，平时有哪些地方用到？</strong></p><p>watch 用的比较多，父子组件传值的时候，用于监听父传子中值的变化，并作出变化</p><h2 id="_10-vue2、vue3-的响应式原理是什么-vue3-的响应式解决-vue2-的哪些痛点" tabindex="-1"><a class="header-anchor" href="#_10-vue2、vue3-的响应式原理是什么-vue3-的响应式解决-vue2-的哪些痛点" aria-hidden="true">#</a> 10. Vue2、Vue3 的响应式原理是什么？Vue3 的响应式解决 Vue2 的哪些痛点？</h2><p>Vue2 的响应式原理</p><p>基于<code>Object.defineProperty ()</code>方法来实现的。通过它来劫持 <code>data</code> 中对象的 <code>getter</code> 和 <code>setter</code> 方法，并在读取和修改的时候触发更新机制</p><p>Vue3 的响应式原理</p><p><code>Proxy</code> 对数据实现 <code>getter/setter</code> 代理，从而实现响应式数据，</p><p>Vue3 解决了 Vue2 的痛点</p><ol><li>对象属性新增删除无法检测，视图无法更新 <ol><li>原因：<code>object.defineProerty</code> 只能监听已存在的属性，为了解决这个问题，Vue2 采用 <code>$set</code> 方法进行手动监听</li></ol></li><li>无法通过数组索引直接赋值 <ol><li>原因：<code>object.defineProerty</code> 无法直接新增数组索引，解决办法就是 Vue2 重写了数组的操作方法。</li></ol></li></ol>',17),x={href:"https://juejin.cn/post/7124351370521477128#heading-7",target:"_blank",rel:"noopener noreferrer"},_={href:"https://zhuanlan.zhihu.com/p/689466591",target:"_blank",rel:"noopener noreferrer"},V=e(`<blockquote><p>【扩展】js 中的 get、set</p></blockquote><p><code>get</code> 这个属性, 在 ES5 中就有了, 每个对象都有 <code>get</code>、<code>set</code> 方法</p><p><code>get</code> 关键字将对象属性与函数进行绑定, 当属性被访问时, 对应函数被执行</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
log<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;example&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token keyword">get</span> <span class="token function">latest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>log<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>log<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>log<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>latest<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：&quot;test&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>set</code> 关键字将对象属性与函数进行绑定，当改变属性值时，对应函数被执行</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> language <span class="token operator">=</span> <span class="token punctuation">{</span>
log<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">set</span> <span class="token function">current</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

language<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">;</span>
language<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token string">&#39;FA&#39;</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>language<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// expected output: Array [&quot;EN&quot;, &quot;FA&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-双向数据绑定的原理是什么" tabindex="-1"><a class="header-anchor" href="#_11-双向数据绑定的原理是什么" aria-hidden="true">#</a> 11. 双向数据绑定的原理是什么？</h2><p><code>v-model</code>本质就是一个语法糖，可以看成是<code>value + input</code>方法的语法糖</p><p>可以通过 <code>model</code> 属性的<code>prop</code>和<code>event</code>属性来进行自定义</p><p>原生的 <code>v-model</code>，会根据标签的不同生成不同的事件和属性</p><h2 id="_12-hook-与-mixins-有什么区别" tabindex="-1"><a class="header-anchor" href="#_12-hook-与-mixins-有什么区别" aria-hidden="true">#</a> 12. hook 与 mixins 有什么区别？</h2><p>hooks 是 Vue3 中才有的</p><p>mixins 是 Vue2 中有的</p><p>mixins 与 hooks 的作用都是为了抽离一些公共的功能</p><p>mixins 的弊端有两点</p><ol><li><p>组件的data、methods、filters会覆盖mixins里的同名data、methods、filters</p></li><li><p>变量来源不明确（隐式传入），不利于阅读，使代码变得难以维护</p></li></ol><h2 id="_13-hook-函数-与-普通函数的区别" tabindex="-1"><a class="header-anchor" href="#_13-hook-函数-与-普通函数的区别" aria-hidden="true">#</a> 13. hook 函数 与 普通函数的区别？</h2><p>如果一个函数包含了一个能引起视图变化的变量，那么它就是一个 hook 函数，反之是 普通函数，</p><p>在开发中，我们经常会发现一些可以重复利用的代码段，于是我们将其封装成函数以供调用，</p><p>这类函数包括工具函数，但是又不止工具函数，因为我们可能也会封装一些重复的业务逻辑。</p><p>以往，在前端原生开发中，我们封装的这些函数都是“无状态”的，</p><p>为了建立数据与视图之间的联系，基于 MVC 架构的 React 框架和基于 MVVM 的 Vue 框架都引入了“状态”这一概念，</p><p>状态是特殊的 JavaScript 变量，它的变化会引起视图的变化。</p><p>在这类框架中，如果一个变量的变化不会引起视图的变化，那么它就是普通变量，如果一个变量已经被框架注册为状态，</p><p>那么这个变量的变化就会引发视图的变化，我们称之为响应式变量。如果一个函数包含了状态（响应式变量），那么它就是一个 Hook 函数。</p><blockquote><p>在具备“状态”的框架的基础上，才有 Hook 这一说。Hook 函数与普通函数的本质区别在于是否具备“状态”。</p></blockquote><h2 id="_14-谈一谈你对-vue-router-的理解" tabindex="-1"><a class="header-anchor" href="#_14-谈一谈你对-vue-router-的理解" aria-hidden="true">#</a> 14. 谈一谈你对 vue-router 的理解</h2><h3 id="vue-router-有哪些特点-了解" tabindex="-1"><a class="header-anchor" href="#vue-router-有哪些特点-了解" aria-hidden="true">#</a> Vue Router 有哪些特点？(了解)</h3><ol><li>嵌套路由：Vue Router 支持嵌套路由，可以将一个路由映射到多个组件中，实现组件的复用。</li><li>路由参数：Vue Router 支持路由参数，可以通过路由参数来传递数据。</li><li>路由导航：Vue Router 提供了路由导航功能，可以在路由跳转前进行拦截和处理。</li><li>路由懒加载：Vue Router 支持路由懒加载，可以按需加载路由对应的组件，减少首屏加载时间。</li><li>动态路由：Vue Router 支持动态路由，可以根据不同的路由参数动态生成路由。</li><li>导航守卫：Vue Router 提供了导航守卫功能，可以在路由跳转前、跳转后、跳转取消时进行拦截和处理。</li><li>HTML5 History 模式和 Hash 模式：Vue Router 支持 HTML5 History 模式和 Hash 模式，可以根据实际需求选择合适的模式。</li></ol><h3 id="vue-router-中的路由模式有哪些" tabindex="-1"><a class="header-anchor" href="#vue-router-中的路由模式有哪些" aria-hidden="true">#</a> Vue Router 中的路由模式有哪些？</h3><p>hash、history</p><p>区别:</p><p><strong>Hash模式</strong></p><ol><li><strong>URL结构</strong>：在URL中带有“#”符号，例如<code>[http://example.com](http://example.com) #/路线</code>。</li><li><strong>实现方式</strong>：通过在URL后添加哈希值（即#后面的部分）来模拟一个完整的URL。当URL的哈希值发生变化时，Vue Router会根据哈希值的变化来匹配相应的路由并展示相应的组件。</li><li>特点 <ul><li>不需要服务器支持，直接在客户端处理路由变化。</li><li>可以利用浏览器的<code>hashchange</code>事件来检测路由变化。</li><li>在某些情况下，如使用服务器端渲染<code>（SSR）</code>，可能会遇到兼容性问题。</li></ul></li></ol><p><strong>History模式</strong></p><ol><li><strong>URL结构</strong>：不带“#”符号，例如<code>[http://example.com](http://example.com) 路线</code>。</li><li><strong>实现方式</strong>：利用HTML5的<code> history.pushState ()</code> 和 <code>history.replaceState ()</code> 方法来在浏览器的历史记录栈中添加或更新记录。这些操作不会触发页面的重新加载，因此可以实现真正的无刷新导航。</li><li>特点 <ul><li>需要服务器的支持，通常需要配置Nginx等代理服务器来正确处理路由变化。</li><li>更符合现代Web应用的使用习惯，用户体验更好，因为用户在地址栏看到的是简洁的路径而不是带有哈希值的URL。</li><li>可以完全避免浏览器的<code>hashchange</code>事件，因此在所有现代浏览器上都能正常工作。</li></ul></li></ol><p>应用场景</p><ol><li>有些第三方应用路由跳转, 不允许带 #，<code>history</code> 模式</li><li>需要 <code>SEO</code> 优化，也可使用 <code>history</code> 模式</li></ol><blockquote><p>项目通常使用什么路由模式：</p></blockquote><h3 id="vue-router-中的路由钩子函数有哪些" tabindex="-1"><a class="header-anchor" href="#vue-router-中的路由钩子函数有哪些" aria-hidden="true">#</a> Vue Router 中的路由钩子函数有哪些？</h3><p>Vue Router 中的路由钩子函数包括全局钩子函数和组件内的钩子函数，具体如下：</p><ol><li><strong>全局钩子函数</strong>： <ul><li><code>beforeEach</code>：在任意路由跳转前都会被调用，通常用于登录验证等操作。</li><li><code>afterEach</code>：在路由跳转完成后调用。</li><li><code>beforeResolve</code>：在解析异步组件时调用。</li></ul></li><li><strong>单一路由钩子函数</strong>： <ul><li><code>beforeEnter</code>：仅在路由跳转到该路由时调用。</li></ul></li><li><strong>组件内钩子函数</strong>： <ul><li><code>beforeRouteEnter</code>：在路由进入前调用，用于初始化数据。</li><li><code>beforeRouteUpdate</code>：在路由更新时调用，用于处理数据变化。</li><li><code>beforeRouteLeave</code>：在路由离开前调用，用于清理资源。</li></ul></li></ol><p>这些钩子函数接收三个参数：<code>to</code>（目标路由对象）、<code>from</code>（当前路由对象）和<code>next</code>（用于控制路由跳转流程的函数）。<code>next</code>函数的调用方式决定了钩子函数的执行流程，例如，<code>next()</code>会继续执行下一个钩子函数或导航，而<code>next(false)</code>则会中断当前的导航。</p><h3 id="vue-router-中的路由懒加载是什么" tabindex="-1"><a class="header-anchor" href="#vue-router-中的路由懒加载是什么" aria-hidden="true">#</a> Vue Router 中的路由懒加载是什么?</h3><p>如何实现？</p><p>将路由路径改为 返回 import() 函数的函数即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./Foo.vue&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是，在使用路由懒加载时，我们需要确保 Webpack 已经正确地配置了代码分割和按需加载的相关配置，以确保能够正确地进行代码分割和按需加载。在 Vue CLI 中，默认已经配置好了路由懒加载和代码分割的相关配置，因此我们可以直接在项目中使用路由</p><h3 id="vue-router-中的导航守卫有哪些-它们的执行顺序是怎样的" tabindex="-1"><a class="header-anchor" href="#vue-router-中的导航守卫有哪些-它们的执行顺序是怎样的" aria-hidden="true">#</a> Vue Router 中的导航守卫有哪些，它们的执行顺序是怎样的？</h3><p>Vue Router 中的导航守卫有三种，它们分别是 <code>全局守卫</code>、<code>单个路由独享守卫</code> 和 <code>组件级守卫</code>。</p><p>它们的执行顺序如下：</p><ol><li>全局前置守卫（<code>beforeEach</code>）：在进入每个路由之前执行。</li><li>路由独享守卫（<code>beforeEnter</code>）：在进入新路由时执行，但不会等待其解析完成就继续执行后续的导航。</li><li>组件内守卫（如 <code>beforeRouteEnter</code>、<code>beforeRouteUpdate</code>、<code>beforeRouteLeave</code>）：在组件激活或更新或离开时执行。</li><li>全局后置守卫（<code>afterEach</code>）：在完成路由跳转后执行。</li></ol><p>需要注意的是，如果在导航守卫中调用了 <code>next</code> 方法，则会进入下一个守卫。如果没有调用 <code>next</code>，则导航会被中断。如果想要重定向到一个不同的地址，可以在 <code>next</code> 方法中传入一个新的路径。</p><p>下面是 <code>beforeEach</code> 钩子函数的一个完整示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进入下一个守卫</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际开发中，我们可以利用导航守卫来进行权限控制、路由拦截、页面跳转等操作。</p><p>路由守卫依赖于钩子函数来完成其任务。</p><h3 id="如何在-vue-router-中传递参数" tabindex="-1"><a class="header-anchor" href="#如何在-vue-router-中传递参数" aria-hidden="true">#</a> 如何在 Vue Router 中传递参数？</h3><p>在 Vue Router 中，可以通过路由路径中的占位符来传递参数，也可以通过 <code>query</code> 和 <code>params</code> 属性来传递参数。</p><ol><li><p>使用路由路径中的占位符来传递参数</p><p>可以在路由路径中使用冒号 <code>:</code> 定义占位符，然后在路由跳转时通过传递参数来填充占位符。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/user/:id&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> User
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，路由路径中使用了 <code>:id</code> 占位符表示用户的 id，当我们进行路由跳转时，可以通过传递参数来替换这个占位符：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在路由组件中可以通过 <code>$route.params</code> 访问到传递的参数，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">userId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 <code>query</code> 和 <code>params</code> 属性来传递参数</p><p>可以在路由跳转时通过 <code>query</code> 和 <code>params</code> 属性来传递参数。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在路由组件中可以通过 <code>$route.query</code> 访问到传递的参数，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">userId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>query</code> 和 <code>params</code> 的区别在于，<code>query</code> 传递的参数会被添加到 URL 中，而 <code>params</code> 传递的参数不会出现在 URL 中，因此 <code>params</code> 更适合传递一些敏感信息。</p></li></ol><h3 id="vue-router-中的嵌套路由是什么-如何实现" tabindex="-1"><a class="header-anchor" href="#vue-router-中的嵌套路由是什么-如何实现" aria-hidden="true">#</a> Vue Router 中的嵌套路由是什么，如何实现？</h3><p>Vue Router 中的嵌套路由可以让我们在一个路由下面，再定义多个子路由。例如，我们可以在 <code>/user</code> 路由下面，定义 <code>/user/profile</code> 和 <code>/user/posts</code> 两个子路由。</p><p>实现嵌套路由的步骤如下：</p><ol><li><p>在父路由下面定义子路由，可以使用 <code>children</code> 字段来定义子路由，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> User<span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;profile&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">component</span><span class="token operator">:</span> UserProfile
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">component</span><span class="token operator">:</span> UserPosts
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在父组件中添加 <code>&lt;router-view&gt;</code> 标签，用于渲染子组件。例如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>User Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在子组件中可以通过 <code>$route</code> 访问到父路由和子路由的信息。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">userId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在子组件中也可以通过 <code>$route</code> 访问到当前子路由的信息，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">postId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>postId
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在访问子路由时，需要在父路由的路径后面添加子路由的路径，例如 <code>/user/profile</code> 和 <code>/user/posts</code>。</p></li></ol><p>需要注意的是，Vue Router 中的嵌套路由可以无限嵌套，但是在使用时要注意路由的层级关系，以免出现混淆和错误。</p><h3 id="vue-router-中的动态路由是什么-如何实现" tabindex="-1"><a class="header-anchor" href="#vue-router-中的动态路由是什么-如何实现" aria-hidden="true">#</a> Vue Router 中的动态路由是什么，如何实现？</h3><p>动态路由主要通过两个函数实现。<code>router.addRoute()</code> 和 <code>router.removeRoute()</code>。它们只注册一个新的路由，也就是说，如果新增加的路由与当前位置相匹配，就需要你用 <code>router.push()</code> 或 <code>router.replace()</code> 来<strong>手动导航</strong>，才能显示该新路由。</p><h3 id="vue-router-中的命名路由是什么-如何使用" tabindex="-1"><a class="header-anchor" href="#vue-router-中的命名路由是什么-如何使用" aria-hidden="true">#</a> Vue Router 中的命名路由是什么，如何使用？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/user/:username&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> User<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要链接到一个命名的路由，可以向 <code>router-link</code> 组件的 <code>to</code> 属性传递一个对象：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ name: &#39;user&#39;, params: { username: &#39;erina&#39; }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  User
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这跟代码调用 <code>router.push()</code> 是一回事：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;erina&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这两种情况下，路由将导航到路径 <code>/user/erina</code>。</p><h2 id="_15-如何取消请求" tabindex="-1"><a class="header-anchor" href="#_15-如何取消请求" aria-hidden="true">#</a> 15. 如何取消请求？</h2><p><code>AxiosV0.22.0</code> 前使用 <code>CancelToken</code> 取消请求</p><p><code>AxiosV0.22.0</code> 后使用 <code>AbortController</code> 取消请求，<code>AbortController</code> 不止可以取消请求，还可以取消监听</p>`,77),q={href:"https://juejin.cn/post/7153831304042119198?searchId=202408132328240728351B277373A79459",target:"_blank",rel:"noopener noreferrer"},j={href:"https://juejin.cn/post/6844904072051425293?searchId=202408141022472A2F16170BD0D057BCDF",target:"_blank",rel:"noopener noreferrer"},w=e(`<h2 id="_16-插槽" tabindex="-1"><a class="header-anchor" href="#_16-插槽" aria-hidden="true">#</a> 16. 插槽</h2><ul><li>插值、表达式</li><li>指令、动态属性</li><li>v-html: 会有 XSS 风险, 会覆盖子组件</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 代码演示 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>文本插值 {{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>JS 表达式 {{ flag ? &#39;yes&#39; : &#39;no&#39; }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>P</span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dynamicId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>动态属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>P</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rawHtml<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>【注意】使用 v-html 之后, 将会覆盖子元素 (也就是 span 中的内容会被覆盖)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;hello vue&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token literal-property property">rawHtml</span><span class="token operator">:</span> <span class="token string">&#39;指令 - 原始 html &lt;b&gt;加粗&lt;/b&gt; &lt;i&gt;斜体&lt;/i&gt;&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">dynamicId</span><span class="token operator">:</span> <span class="token string">&#39;id-\${Date.now()}&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 插槽的使用 (具名插槽) --&gt;</span>
<span class="token comment">&lt;!-- 父组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>子组件</span><span class="token punctuation">&gt;</span></span>
    	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>a</span><span class="token punctuation">&gt;</span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>b</span><span class="token punctuation">&gt;</span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>c</span><span class="token punctuation">&gt;</span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
    	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>子组件</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 子组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list-content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>b<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 插槽的使用 (作用域插槽) --&gt;</span>
<span class="token comment">&lt;!-- 子组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> 
        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>heading<span class="token punctuation">&quot;</span></span> 
        <span class="token attr-name"><span class="token namespace">v-bind:</span>headingValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>heading<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        {{heading}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 为了让大家看的更清楚 已经将Child.vue组件中多余的内容删除 --&gt;</span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Child&#39;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">heading</span><span class="token operator">:</span> <span class="token string">&#39;这里是默认的heading&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 父组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>heading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slotValue<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>element-ui组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
        slotValue = {{slotValue}}
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),R={href:"https://juejin.cn/post/7208015274079469627",target:"_blank",rel:"noopener noreferrer"},U=e(`<h2 id="_17-v-model-是谁的语法糖" tabindex="-1"><a class="header-anchor" href="#_17-v-model-是谁的语法糖" aria-hidden="true">#</a> 17. v-model 是谁的语法糖?</h2><p><code>v-model=&#39;message&#39;</code> 语法糖本质上可以修改为</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>function(e){message = e}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在大部分情况下， <code>v-model=&#39;foo&#39;</code> 等价于 <code>:value=&#39;foo&#39;</code> 加上 <code>@input=&#39;foo=$event&#39;</code></p><h2 id="_18-指令" tabindex="-1"><a class="header-anchor" href="#_18-指令" aria-hidden="true">#</a> 18. 指令</h2><p><strong>Vue 有哪些指令?</strong></p><p>v-text、v-html、v-show、v-if、v-else、v-else-if、v-for、v-on、v-bind、v-model、v-slot、v-pre、v-cloak、v-once</p><p><strong>Vue 自定义指令?</strong></p><ul><li><p>通过 Vue.directive() 函数注册一个全局的指令</p></li><li><p>通过组件的 directives 属性，对该组件添加一个局部的指令</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 全局</span>
Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;self_defined_name&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token function-variable function">bind</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//do someting</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//do something</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 局部</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">directives</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">self_defined_name1</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token function-variable function">bind</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token comment">//do something</span>
        <span class="token punctuation">}</span>
        <span class="token function-variable function">inserted</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token comment">//do something</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>              
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 使用 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-self_defined_name1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ color: &#39;green&#39;, text: &#39;菜鸟教程!&#39; }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function P(A,I){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("h1",d,[k,s(),n("a",v,[s("2025前端最新面试题-框架篇vue.md"),t(a)])]),m,n("p",null,[n("a",g,[s("【Vue3】如何封装一个超级好用的 Hook - 掘金 (juejin.cn)"),t(a)])]),b,h,n("blockquote",null,[n("p",null,[s("vue3 的 hook 库 "),n("a",f,[s("VueUse"),t(a)])])]),y,n("p",null,[n("a",x,[s("面试官的步步紧逼：Vue2 和 Vue3 的响应式原理比对在面试中难免会被问到 Vue2 和 Vue3 的相关知识点的实 - 掘金 (juejin.cn)"),t(a)])]),n("p",null,[n("a",_,[s("面试官：Vue2 重写了数组方法，你知道 Vue3 也重写了吗？ 我：真当我没看过源码啊？😅 - 知乎"),t(a)])]),V,n("p",null,[n("a",q,[s("axios取消请求总结应用场景 取消请求在前端有时候会用到，以下是两个工作中可能会用到的场景 tab切换时刷新某个列表数 - 掘金 (juejin.cn)"),t(a)])]),n("p",null,[n("a",j,[s("使用 AbortController 终止 fetch 请求在现在的浏览器中，有两种主要的方法发送请求：XML - 掘金 (juejin.cn)"),t(a)])]),w,n("blockquote",null,[n("p",null,[s("[扩展] - "),n("a",R,[s("Vue中的插槽用法：默认插槽、具名插槽、作用域插槽)"),t(a)])])]),U])}const E=p(r,[["render",P],["__file","2025前端最新面试题-框架篇vue.html.vue"]]);export{E as default};

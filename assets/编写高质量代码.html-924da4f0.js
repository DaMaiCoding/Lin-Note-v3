const n=JSON.parse('{"key":"v-6f3607d9","path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%88%86%E7%B1%BB%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81.html","title":"编写高质量代码","lang":"zh-CN","frontmatter":{"description":"编写高质量代码 1. 手写一个 JS 函数, 实现数组扁平化 ArrayFlatten Array Flatten 写一个 JS 函数，实现数组扁平化，只减少一级嵌套 如输入 [1, [2, [3]], 4]. 输出 [1, 2, [3], 4] 思路 定义空数组 arr = []。遍历当前数组 如果 item 非数组，则累加到 arr 如果 item 是数组，则遍历之后累加到 arr /** * 数组扁平化，使用 push * @param arr arr */ export function flattern1(arr: any[]: any[] { const res: any[] = [] arr.forEach(item =&gt; { if (Array.isArray(item)) { item.forEach(n =&gt; res.push(n)) } else { res.push(item) } }) return res }) // 功能测试 const arr = [1, [2, [3]], 5] console.log( flattern1(arr ) )","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Lin-Note-v3/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%88%86%E7%B1%BB%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81.html"}],["meta",{"property":"og:site_name","content":"Lin-Note"}],["meta",{"property":"og:title","content":"编写高质量代码"}],["meta",{"property":"og:description","content":"编写高质量代码 1. 手写一个 JS 函数, 实现数组扁平化 ArrayFlatten Array Flatten 写一个 JS 函数，实现数组扁平化，只减少一级嵌套 如输入 [1, [2, [3]], 4]. 输出 [1, 2, [3], 4] 思路 定义空数组 arr = []。遍历当前数组 如果 item 非数组，则累加到 arr 如果 item 是数组，则遍历之后累加到 arr /** * 数组扁平化，使用 push * @param arr arr */ export function flattern1(arr: any[]: any[] { const res: any[] = [] arr.forEach(item =&gt; { if (Array.isArray(item)) { item.forEach(n =&gt; res.push(n)) } else { res.push(item) } }) return res }) // 功能测试 const arr = [1, [2, [3]], 5] console.log( flattern1(arr ) )"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/Lin-Note-v3/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-19T07:19:39.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"编写高质量代码"}],["meta",{"property":"article:modified_time","content":"2023-06-19T07:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编写高质量代码\\",\\"image\\":[\\"https://mister-hope.github.io/Lin-Note-v3/\\"],\\"dateModified\\":\\"2023-06-19T07:19:39.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. 手写一个 JS 函数, 实现数组扁平化 ArrayFlatten","slug":"_1-手写一个-js-函数-实现数组扁平化-arrayflatten","link":"#_1-手写一个-js-函数-实现数组扁平化-arrayflatten","children":[]},{"level":2,"title":"2. Array Flatten 彻底 ”拍平“","slug":"_2-array-flatten-彻底-拍平","link":"#_2-array-flatten-彻底-拍平","children":[]},{"level":2,"title":"3. 手写一个 getType函数, 获取详细的数据类型","slug":"_3-手写一个-gettype函数-获取详细的数据类型","link":"#_3-手写一个-gettype函数-获取详细的数据类型","children":[]},{"level":2,"title":"4. new 一个对象发生了什么？请手写代码表示","slug":"_4-new-一个对象发生了什么-请手写代码表示","link":"#_4-new-一个对象发生了什么-请手写代码表示","children":[]},{"level":2,"title":"5. Object.create 和 {} 有什么区别？","slug":"_5-object-create-和-有什么区别","link":"#_5-object-create-和-有什么区别","children":[]},{"level":2,"title":"6. 深度优先遍历可以不用递归吗","slug":"_6-深度优先遍历可以不用递归吗","link":"#_6-深度优先遍历可以不用递归吗","children":[]},{"level":2,"title":"7. 手写一个 LazyMan，实现 sleep 机制","slug":"_7-手写一个-lazyman-实现-sleep-机制","link":"#_7-手写一个-lazyman-实现-sleep-机制","children":[]}],"git":{"createdTime":1687159179000,"updatedTime":1687159179000,"contributors":[{"name":"linzeqin","email":"1351123861@qq.com","commits":1}]},"readingTime":{"minutes":4.22,"words":1266},"filePathRelative":"前端面试题/分类面试题/编写高质量代码.md","localizedDate":"2023年6月19日","excerpt":"<h1> 编写高质量代码</h1>\\n<h2> 1. 手写一个 JS 函数, 实现数组扁平化 ArrayFlatten</h2>\\n<p>Array Flatten</p>\\n<ul>\\n<li>写一个 JS 函数，实现数组扁平化，只减少一级嵌套</li>\\n<li>如输入 [1, [2, [3]], 4]. 输出 [1, 2, [3], 4]</li>\\n</ul>\\n<p>思路</p>\\n<ul>\\n<li>定义空数组 arr = []。遍历当前数组</li>\\n<li>如果 item 非数组，则累加到 arr</li>\\n<li>如果 item 是数组，则遍历之后累加到 arr</li>\\n</ul>\\n<div class=\\"language-tsx line-numbers-mode\\" data-ext=\\"tsx\\"><pre class=\\"language-tsx\\"><code><span class=\\"token comment\\">/**\\n* 数组扁平化，使用 push\\n* @param arr arr\\n*/</span>\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">flattern1</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">any</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">any</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> res<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">any</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n    \\n    arr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span>item <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">Array</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isArray</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            item<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">=&gt;</span> res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n            res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    \\n    <span class=\\"token keyword\\">return</span> res\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">// 功能测试</span>\\n<span class=\\"token keyword\\">const</span> arr <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span> <span class=\\"token function\\">flattern1</span><span class=\\"token punctuation\\">(</span>arr <span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};

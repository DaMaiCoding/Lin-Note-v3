import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a as n,b as s,d as p,e as a}from"./app-bc035641.js";const i="/Lin-Note-v3/assets/image-20230227213040278-352df5cc.png",u={},r=a(`<h1 id="vue3-vs-vue2" tabindex="-1"><a class="header-anchor" href="#vue3-vs-vue2" aria-hidden="true">#</a> Vue3-vs-Vue2</h1><h2 id="vue3-性能提升" tabindex="-1"><a class="header-anchor" href="#vue3-性能提升" aria-hidden="true">#</a> Vue3 性能提升</h2><p>与 Vue2.x 相比, mount 50% 提升, 内存占用小 120%</p><h2 id="vue3-框架体积减少" tabindex="-1"><a class="header-anchor" href="#vue3-框架体积减少" aria-hidden="true">#</a> Vue3 框架体积减少</h2><ul><li>核心代码 + Composition API: 13.5kb, 最小 11.75kb</li><li>所有 Runtime: 22.5kb (Vue2 是 32kb)</li></ul><h2 id="vue3-新特性" tabindex="-1"><a class="header-anchor" href="#vue3-新特性" aria-hidden="true">#</a> Vue3 新特性</h2><ul><li>TS 重写 Diff 算法, 使用 Proxy 性能更优, 框架体积更小</li><li>新的 Compiler, 通过注释标记提升框架性能</li><li>Composition API, 模块化功能代码, 摒弃 <code>this</code></li><li>更好的按需加载 (得益于 Tree Shaking), Webpack 打包时能更好的按需打包</li><li>新增: Fragment、Teleport、Suspense</li><li>Vite 开发工具</li></ul><blockquote><p>为什么摒弃 <code>this</code> ?</p><p><code>this</code> 的指向不明确, 不清楚代码的调用在哪里</p><p>采用函数式编程, 虽然比较偏激, 但是带来的好处就是类型推导变得非常简单, 而且容易理解, 类似于 <code>python</code></p></blockquote><h2 id="响应式原理" tabindex="-1"><a class="header-anchor" href="#响应式原理" aria-hidden="true">#</a> 响应式原理</h2><p><strong>Proxy 原理</strong></p><ul><li>proxy 代替 Object.defineProperty() 实现数据响应</li><li>Proxy 是 ES6 的语法, 有浏览器兼容性问题</li></ul><p><strong>Proxy 介绍</strong></p><p>MDN: Proxy 对象用于定义基本操作的自定义行为 (如属性查找、赋值、枚举、函数调用等)</p><ul><li>拦截功能</li><li>提供对象访问</li><li>可以重写属性或者构造函数</li></ul><p><strong>Proxy 为什么 比 Object.defineProperty 更好</strong></p><p>我们创建一个对象且声明属性, 使用 Object.defineProperty 去监听属性的变化, 也就是为每个属性赋予 get、set 方法, 因为对象可能是多层对象, 所以它需要深度去遍历每个属性, 这个时候遍历已经完成了。 但是新增，删除属性, 这个时候不会对新增、删除属性赋予 get、set 方法。所以, Vue2 才无法对对象属性进行新增、删除。所以开发的时候使用, Vue2 都是先声明属性, 再对数据进行操作。</p><p>Proxy 是不是对原始个对象进行监听, 而是去监听原始对象的代理对象, 代理对象只要变化, 就会触发对应 get、set 函数。</p><p><strong>ref vs reactive 用法与区别</strong></p><p>如何定义一个响应式变量或数组、对象?</p><p>使用 ref、reactive</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 定义</span>
<span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;Lin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    lists<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        text<span class="token operator">:</span> <span class="token string">&#39;zhang san&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        text<span class="token operator">:</span> <span class="token string">&#39;li si&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 使用</span>
total<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;Pin&#39;</span>
state<span class="token punctuation">.</span>lists<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>对于数组的操作</strong></p><p>vue2 中不能直接操作数组, 如 <code>this.arr[0] = 233</code>, 这样做的话, 数组改变了, 但是视图不会渲染</p><p>但是 vue3 中就可以直接操作数组, 且视图会渲染, 这是 vue3 的一个新的特点</p><p><strong>readonly 使用方法及场景</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token keyword">readonly</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span>

<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用来做响应性追踪</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 更改源属性会触发其依赖的侦听器</span>
original<span class="token punctuation">.</span>count<span class="token operator">++</span>

<span class="token comment">// 更改该只读副本将会失败，并会得到一个警告</span>
copy<span class="token punctuation">.</span>count<span class="token operator">++</span> <span class="token comment">// warning!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景: 比如, 子组件使用父组件的数据, 但是不想子组件去修改这个数据, 就可以使用这个属性了</p><p><strong>toRefs 的使用</strong></p><p>主要作用是从组合逻辑函数中返回一个响应式的对象</p><p><strong>reactive <code>深</code> 转换响应式副本, readonly 创建只读对象</strong></p><p><strong>isProxy/isReactive/isReadonly &amp; toRaw/toRef/toRefs</strong></p><p>toRaw: 将响应式对象转换为普通对象</p><p>toRefs: 将非响应式对象转换为响应式的映射</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 其他 API 代补充</label></li></ul><h2 id="compiler-原理篇" tabindex="-1"><a class="header-anchor" href="#compiler-原理篇" aria-hidden="true">#</a> Compiler 原理篇</h2><p><strong>优化 - 1</strong></p><ul><li>静态 Node 不再作更新处理 (hoistStatic -&gt; SSR优化)</li><li>静态绑定的 class, id 不再作更新处理</li><li>结合打包标记 PatchFlag, 进行更新分析 (动态绑定)</li></ul><p><strong>优化 - 2</strong></p><ul><li>事件监听器 Cache 缓存处理 (cacheHandles)</li><li>hoistStatic 自动针对多静态节点进行优化, 输出字符串</li></ul><h2 id="diff-算法比较" tabindex="-1"><a class="header-anchor" href="#diff-算法比较" aria-hidden="true">#</a> Diff 算法比较</h2><p><strong>Vue2 Diff 算法</strong></p><ul><li>新旧节点对比, 先从前面对比, 再从后面对比, 抽离出一样的部分</li><li>从第一元素开始对比, 通过移位, 新增来实现更新</li></ul><hr><p><strong>Vue3 Diff 算法</strong></p><ul><li>patchChildren 根据是否存在 key 进行真正的 diff (静态标记 - 标记会动态改变的节点)</li><li>复用真实的 dom 节点, 避免不必要的性能开销</li><li>乱序时, 先找到最长递增子序列作为参考, 然后再移动, 减少比较次数, 提高了性能 (重点)</li></ul><p><strong>核心就是子节点之间的对比, 主要分为两种情况</strong></p><ul><li>子节点无 key (只作长度对比)</li><li>子节点有 key</li></ul><p><strong>无 key 时, 我们希望尽可能复用老节点</strong></p><ul><li>比较新老 children 的 length 获取最小值</li><li>对于公共部分, 进行从新 patch 工作</li><li>如果长于旧, 则新增; 如果短于旧, 则删除</li></ul><h2 id="watch-与-watcheffect" tabindex="-1"><a class="header-anchor" href="#watch-与-watcheffect" aria-hidden="true">#</a> watch 与 watchEffect</h2><p><strong>watch 在 vue2、vue3 中区别</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vue3 中的写法</span>
<span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> prevCount<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">/* ... */</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// vue2 中的写法</span>
watch<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">counter</span> <span class="token punctuation">(</span>newval<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> oldval<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newval<span class="token punctuation">,</span> oldval<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52),d={href:"https://blog.csdn.net/Liushiliu104/article/details/119987818",target:"_blank",rel:"noopener noreferrer"},k=a(`<p><strong>watchEffect 的使用</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> total <span class="token operator">=</span> counter<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;total is:&#39;</span> <span class="token operator">+</span> total<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    flush<span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">,</span> <span class="token comment">// pre | post | sync (触发的时机设置)</span>
    <span class="token function-variable function">onTrack</span><span class="token operator">:</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;onTrack -&gt; e&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>watch vs watchEffect</strong></p><ul><li>都可以监听响应式对象的变化, 从而执行回调</li><li>watchEffect 会默认执行一次, 而 watch 不会, 必须事件触发</li><li>watchEffect 只接收函数作为回调函数</li></ul><h2 id="计算属性-computed-的使用" tabindex="-1"><a class="header-anchor" href="#计算属性-computed-的使用" aria-hidden="true">#</a> 计算属性 (computed) 的使用</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vue3 </span>
<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> num1<span class="token punctuation">.</span>value <span class="token operator">+</span> num2<span class="token punctuation">.</span>value
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 	<span class="token function-variable function">get</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  	<span class="token keyword">return</span> num1<span class="token punctuation">.</span>value <span class="token operator">*</span><span class="token number">10</span>
 	<span class="token punctuation">}</span><span class="token punctuation">,</span>
 	<span class="token function-variable function">set</span><span class="token operator">:</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  	<span class="token keyword">return</span> num1<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token operator">/</span><span class="token number">10</span>
 	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// vue2</span>
computed<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">total</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;🚀 ~ file: HomeView.vue:39 ~ total ~ counter:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">*</span> <span class="token number">2</span>
    <span class="token punctuation">}</span>
  	total<span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// num1值改变时触发</span>
       	<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num1 <span class="token operator">*</span> <span class="token number">10</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// mul值被改变时触发</span>
       	<span class="token keyword">this</span><span class="token punctuation">.</span>num1 <span class="token operator">=</span> value <span class="token operator">/</span><span class="token number">10</span>
      <span class="token punctuation">}</span>
 	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 传递参数</span>
<span class="token keyword">const</span> sltEle <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),v={href:"https://www.cnblogs.com/web-learn/p/15601335.html#:~:text=%E5%9C%A8vue2%E4%B8%AD%EF%BC%8Ccomputed",target:"_blank",rel:"noopener noreferrer"},m=a(`<h2 id="如何在-ts-中配置-this-指向问题" tabindex="-1"><a class="header-anchor" href="#如何在-ts-中配置-this-指向问题" aria-hidden="true">#</a> 如何在 ts 中配置 this 指向问题</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// tsconfig.json</span>
<span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;dom&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;dom.iterable&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;scripthost&quot;</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token property">&quot;noImplicitThis&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 配置这个属性为 false 就不会再检查 this 指向问题</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="implicitly-has-an-any-type-解决方法" tabindex="-1"><a class="header-anchor" href="#implicitly-has-an-any-type-解决方法" aria-hidden="true">#</a> implicitly has an ‘any‘ type 解决方法</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// tsconfig.json</span>
<span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 配置这个属性就可以忽略 any 报错了</span>
    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;jsx&quot;</span><span class="token operator">:</span> <span class="token string">&quot;preserve&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;skipLibCheck&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;allowSyntheticDefaultImports&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;forceConsistentCasingInFileNames&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;useDefineForClassFields&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;webpack-env&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue3-生命周期钩子函数" tabindex="-1"><a class="header-anchor" href="#vue3-生命周期钩子函数" aria-hidden="true">#</a> Vue3 生命周期钩子函数</h2><p><strong>调试时使用的钩子函数</strong></p><p>onRenderTracked() 当组件渲染过程中追踪到响应式依赖时调用 (调用一次)</p><p>onRenderTriggered() 当响应式依赖的变更触发了组件渲染时调用 (改变就调用)</p><p><strong>Vue3 选项式 API 名称的改动</strong></p><p>destroy 改为 unmounted</p><p>beforeDestroy 改为 beforeUnmounted</p><p><strong>setup() 优先于 beforeCreate 执行</strong></p><p><strong>选项式 API 的生命周期, 及钩子函数 (钩子函数就是在 生命周期前面 加上 <code>on</code> 而已)</strong></p><figure><img src="`+i+`" alt="image-20230227213040278" tabindex="0" loading="lazy"><figcaption>image-20230227213040278</figcaption></figure><h2 id="suspense-简介-封装errorcapture组件" tabindex="-1"><a class="header-anchor" href="#suspense-简介-封装errorcapture组件" aria-hidden="true">#</a> Suspense 简介 &amp; 封装ErrorCapture组件</h2><p><strong>Suspense 的基本使用</strong></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 异步加载的组件 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>User</span> <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#fallback</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 加载过程中的提示 --&gt;</span>
        loadding ...
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>封装 ErrorCapture 组件</strong></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- ErrorCapture 组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:err</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>default<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#fallback</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fallback<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> onErrorCaptured<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>

        <span class="token function">onErrorCaptured</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            error<span class="token punctuation">.</span>value <span class="token operator">=</span> err <span class="token keyword">as</span> unknown <span class="token keyword">as</span> string
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>


        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            error
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!--使用 ErrorCapture 组件--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SuspenseWithError</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#error</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{err}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        {{ err }}
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>User</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- 这个是自己定义的组件 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#fallback</span><span class="token punctuation">&gt;</span></span>
        loadding ...
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SuspenseWithError</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">&#39;@/components/User.vue&#39;</span>
<span class="token keyword">import</span> SuspenseWithError <span class="token keyword">from</span> <span class="token string">&#39;./components/SuspenseWithError.vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    User<span class="token punctuation">,</span>
    SuspenseWithError
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="teleport-组件介绍" tabindex="-1"><a class="header-anchor" href="#teleport-组件介绍" aria-hidden="true">#</a> teleport 组件介绍</h2><p><strong>使用场景</strong></p><p>有时候我们需要放置元素到根节点以外的位置 ( 例如 全屏遮罩 )</p><p><strong>teleport 组件</strong></p><ul><li>控制部分 DOM 脱离根节点</li><li>可以使用本地化逻辑控制组件</li><li>适用于 fixed 或者 绝对定位的组件</li></ul><p><strong>Teleport 的 to 属性可以指定的对象格式</strong></p><ul><li>id -&gt; <code>&lt;teleport to = “#id” &gt;</code></li><li>claass -&gt; <code>&lt;teleport to = “.className” &gt;</code></li><li>data -&gt; <code>&lt;teleport to = &quot;[data-meta]&quot; &gt;</code></li><li>动态 -&gt; <code>&lt;teleport :to = &quot;props&quot; &gt;</code></li></ul><p><strong>Teleport 的基本能使用</strong></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 使用 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>#end-of-body<span class="token punctuation">&#39;</span></span> <span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 通过 id 标签 --&gt;</span>
    hello teleport to end of body
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>teleport</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    This should be at the top. 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 指定标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>end-of-body<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 设置 id --&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Teleport 相关特性</strong></p><ul><li><p><code>:disabled = true</code> (显示在 app 中)</p></li><li><p><code>:disabled = false</code> (显示在指定元素内)</p></li><li><p><code>disable</code> 不会隐藏元素, 要隐藏元素可以使用 <code>v-if</code></p></li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>#end-of-body<span class="token punctuation">&#39;</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!toggle<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toggle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    hello from teleport
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>teleport</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>toggle value: {{ toggle }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    This should be at the top.
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toggleHandle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>toggleHandle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><ul><li>teleport 传送 DOM 到 to 属性指定的绑定位置</li><li>teleport 是保持状态的 (比如视频播放状态会被保持, 不会中断播放), 使用 disbled 属性关闭传送, <code>disble = true</code> 关闭</li><li>teleport 中可以传送多组 DOM, 按照先后顺序 <code>append</code></li></ul><h1 id="vue2-与-vue3-的总结" tabindex="-1"><a class="header-anchor" href="#vue2-与-vue3-的总结" aria-hidden="true">#</a> Vue2 与 Vue3 的总结</h1><h2 id="为什么用-proxy-api-代替-defineproperty-api" tabindex="-1"><a class="header-anchor" href="#为什么用-proxy-api-代替-defineproperty-api" aria-hidden="true">#</a> 为什么用 Proxy API 代替 defineProperty API</h2><p>Vue2 defineProperty API 对一个对象进行增加与删除属性都没有响应式, 用 API (pop、push) 操作数组也没有响应式, 数组用下标修改就可以 <code>arr[0] = 100</code></p><p>Vue3 Proxy API 解决了 defineProperty 的不足, 可以对对象增加、删除属性, 可以使用数组操作 API</p><h2 id="api-上的区别-或者说-语法上的区别" tabindex="-1"><a class="header-anchor" href="#api-上的区别-或者说-语法上的区别" aria-hidden="true">#</a> API 上的区别 或者说 语法上的区别</h2><p>setup 中没有 this</p><p>具有类型推导, 也就是在编辑器中鼠标放在变量或者方法上能显示其类型, 也就是说 vue3 能自动推导出类型</p><h2 id="vue3-api-分类" tabindex="-1"><a class="header-anchor" href="#vue3-api-分类" aria-hidden="true">#</a> Vue3 API 分类</h2><p><strong>选项式 API (Options API)</strong></p><p>这类 API 主要是原来 vue2 里的一些 API, 如 watch, computed 写在 export default 里面的</p><p><strong>组合式 API (Composition API)</strong></p><p>该类 API 是指 vue3 可以抽离出来的 API, 如 setup 里面的 watch、watchEffect、computed</p><h2 id="性能上的优化" tabindex="-1"><a class="header-anchor" href="#性能上的优化" aria-hidden="true">#</a> 性能上的优化</h2><p><strong>diff 算法优化</strong></p><p><strong>静态提升</strong></p><p><strong>事件监听缓存</strong></p><p>默认情况下 “绑定事件” 会被视为动态绑定，所以每次都会追踪他的变化。但是函数还是同一个函数所以没必要追踪，直接缓存起来复用就好了，这就是所说的事件监听缓存</p><p><strong>SSR 优化</strong></p>`,53);function g(b,h){const t=o("ExternalLinkIcon");return l(),c("div",null,[r,n("p",null,[n("a",d,[s("vue2.x中Watch 和 vue3.x中Watch使用和区别"),p(t)])]),k,n("p",null,[s("[Vue2、Vue3 中 computed 的使用与不同 ]("),n("a",v,[s("https://www.cnblogs.com/web-learn/p/15601335.html#:~:text=在vue2中，computed"),p(t)]),s(" 写法： computed%3A { sum () {,return this.num1%2B this.num2 } } 在vue3 如果使用选项式API也可以这样写，主要看下组合式API的使用。)")]),m])}const q=e(u,[["render",g],["__file","Vue3-vs-Vue2.html.vue"]]);export{q as default};

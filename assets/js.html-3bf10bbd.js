const e=JSON.parse('{"key":"v-a40be946","path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%A0%B8%E5%BF%83%E9%9D%A2%E8%AF%95%E9%A2%98/js.html","title":"JS 面试题","lang":"zh-CN","frontmatter":{"description":"JS 面试题 1. 直接赋值 (引用)、浅拷贝、深拷贝 区别 **直接赋值 (引用)：**其实就是对象的引用（别名） **浅拷贝：**拷贝父对象，不会拷贝对象的内部的子对象 **深拷贝：**完全拷贝了父对象及其子对象 b = a: 赋值引用，a 和 b 都指向同一个对象 img b = a.copy(): 浅拷贝, a 和 b 是一个独立的对象，但他们的子对象还是指向统一对象（是引用）","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/DaMaiCoding-Note/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%A0%B8%E5%BF%83%E9%9D%A2%E8%AF%95%E9%A2%98/js.html"}],["meta",{"property":"og:site_name","content":"DaMaiCoding-Note"}],["meta",{"property":"og:title","content":"JS 面试题"}],["meta",{"property":"og:description","content":"JS 面试题 1. 直接赋值 (引用)、浅拷贝、深拷贝 区别 **直接赋值 (引用)：**其实就是对象的引用（别名） **浅拷贝：**拷贝父对象，不会拷贝对象的内部的子对象 **深拷贝：**完全拷贝了父对象及其子对象 b = a: 赋值引用，a 和 b 都指向同一个对象 img b = a.copy(): 浅拷贝, a 和 b 是一个独立的对象，但他们的子对象还是指向统一对象（是引用）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/DaMaiCoding-Note/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-21T16:39:25.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"JS 面试题"}],["meta",{"property":"article:modified_time","content":"2024-04-21T16:39:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JS 面试题\\",\\"image\\":[\\"https://mister-hope.github.io/DaMaiCoding-Note/\\"],\\"dateModified\\":\\"2024-04-21T16:39:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. 直接赋值 (引用)、浅拷贝、深拷贝","slug":"_1-直接赋值-引用-、浅拷贝、深拷贝","link":"#_1-直接赋值-引用-、浅拷贝、深拷贝","children":[{"level":3,"title":"区别","slug":"区别","link":"#区别","children":[]},{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]}]},{"level":2,"title":"2. ES6 新特性","slug":"_2-es6-新特性","link":"#_2-es6-新特性","children":[{"level":3,"title":"箭头函数函数 与 普通函数的区别？","slug":"箭头函数函数-与-普通函数的区别","link":"#箭头函数函数-与-普通函数的区别","children":[]},{"level":3,"title":"var 和 let、const","slug":"var-和-let、const","link":"#var-和-let、const","children":[]},{"level":3,"title":"Promise","slug":"promise","link":"#promise","children":[]}]},{"level":2,"title":"3. 事件循环","slug":"_3-事件循环","link":"#_3-事件循环","children":[]}],"git":{"createdTime":1713717565000,"updatedTime":1713717565000,"contributors":[{"name":"Jack_Lin","email":"1351123861@qq.com","commits":1}]},"readingTime":{"minutes":3.82,"words":1145},"filePathRelative":"前端面试题/核心面试题/js.md","localizedDate":"2024年4月21日","excerpt":"<h1> JS 面试题</h1>\\n<h2> 1. 直接赋值 (引用)、浅拷贝、深拷贝</h2>\\n<h3> 区别</h3>\\n<ul>\\n<li>**直接赋值 (引用)：**其实就是对象的引用（别名）</li>\\n<li>**浅拷贝：**拷贝父对象，不会拷贝对象的内部的子对象</li>\\n<li>**深拷贝：**完全拷贝了父对象及其子对象</li>\\n</ul>\\n<ol>\\n<li><strong>b = a:</strong> 赋值引用，a 和 b 都指向同一个对象</li>\\n</ol>\\n<figure><figcaption>img</figcaption></figure>\\n<ol start=\\"2\\">\\n<li><strong>b = a.copy():</strong> 浅拷贝, a 和 b 是一个独立的对象，但他们的子对象还是指向统一对象（是引用）</li>\\n</ol>","autoDesc":true}');export{e as data};

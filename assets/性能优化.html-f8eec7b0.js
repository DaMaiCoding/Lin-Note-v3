import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,e as l}from"./app-632e70fb.js";const t="/Lin-Note-v3/assets/image-20230409212935447-2065af7a.png",o="/Lin-Note-v3/assets/image-20230409213807352-3dc2d004.png",r="/Lin-Note-v3/assets/image-20230409215552075-9d305754.png",n="/Lin-Note-v3/assets/image-20230410002232120-6063daa9.png",s="/Lin-Note-v3/assets/image-20230410002322457-ca69ca84.png",d="/Lin-Note-v3/assets/image-20230410002415130-3a488e32.png",p="/Lin-Note-v3/assets/image-20230410002843469-a4e16e50.png",h="/Lin-Note-v3/assets/image-20230410003036179-dd25d1eb.png",g="/Lin-Note-v3/assets/image-20230410004217256-3c2f6439.png",c="/Lin-Note-v3/assets/image-20230410005142158-86c338bd.png",u={},m=l('<h1 id="前端性能优化" tabindex="-1"><a class="header-anchor" href="#前端性能优化" aria-hidden="true">#</a> 前端性能优化</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><figure><img src="'+t+'" alt="image-20230409212935447" tabindex="0" loading="lazy"><figcaption>image-20230409212935447</figcaption></figure><p>性能优化过程: 结合性能检测工具, 得到具体网站的性能瓶颈, 发现一个网站的性能的痛点</p><h2 id="理解页面的生命周期" tabindex="-1"><a class="header-anchor" href="#理解页面的生命周期" aria-hidden="true">#</a> 理解页面的生命周期</h2><h3 id="经典面试题" tabindex="-1"><a class="header-anchor" href="#经典面试题" aria-hidden="true">#</a> 经典面试题</h3><p>从浏览器地址栏输入URL后，到页面渲染出来，整个过程都发生了什么?</p><h3 id="不同级别的回答" tabindex="-1"><a class="header-anchor" href="#不同级别的回答" aria-hidden="true">#</a> 不同级别的回答</h3><p>初级:首先浏览器发起请求，然后服务器返回数据，最后浏览器执行脚本和页面渲染</p><p>中级:知道浏览器输入 url 后会建立 tcp 链接，进行 http 的请求和响应在浏览器接收到服务器返回数据之后了解 html, css 构建渲染树以及 js 引擎解析和执行等</p><p>高级: 如何回答?</p><h3 id="整个链路的流转-整个页面的生命周期" tabindex="-1"><a class="header-anchor" href="#整个链路的流转-整个页面的生命周期" aria-hidden="true">#</a> 整个链路的流转 (整个页面的生命周期)</h3><figure><img src="'+o+'" alt="image-20230409213807352" tabindex="0" loading="lazy"><figcaption>image-20230409213807352</figcaption></figure><p>生命周期就是当用户输入 url 到页面渲染出来的整个链路过程</p><p>学习性能优化, 不能只知道具体方法, 要会部分性能优化缺乏全面的知识体系</p><h3 id="从页面生命周期出发-得出优秀的性能分析方案" tabindex="-1"><a class="header-anchor" href="#从页面生命周期出发-得出优秀的性能分析方案" aria-hidden="true">#</a> 从页面生命周期出发, 得出优秀的性能分析方案</h3><figure><img src="'+r+'" alt="image-20230409215552075" tabindex="0" loading="lazy"><figcaption>image-20230409215552075</figcaption></figure><ol><li>http 请求优化</li></ol><ul><li><p>加载优化 (如 懒加载) -&gt; 直接减少 http 请求, 减少不需要在首屏展示的非关键性信息占用了页面加载时间</p></li><li><p>构建优化 -&gt; 合并资源减少 http 请求数量</p></li></ul><ol start="2"><li>DNS 解析优化</li></ol><ul><li>DNS 解析是通过 递归、迭代去查询, 这样的话就比较耗时</li><li>可以采用 DNS 缓存技术, 优化 DNS 解析的时间</li></ul><ol start="3"><li>TCP 连接优化</li></ol><ul><li>复用 TCP 连接 - 升级 http 协议</li><li>http 1.0 请求过程, 会不断创建 tcp 连接</li><li>http 1.1 到 2.0 都是可以复用 tcp 连接的</li></ul><ol start="4"><li>前后端交互优化</li></ol><ul><li>构建优化 -&gt; 压缩资源, 减少响应数据包体积</li><li>缓存技术 -&gt; 使用 http 缓存技术可以避免重复发送请求, 减少前后端资源的消耗</li></ul><ol start="5"><li>关键路径优化</li></ol><ul><li>渲染优化 (减少重绘、重排) -&gt; 提升渲染过程中性能优化</li></ul><blockquote><p><strong>小结</strong></p><p>加载优化: 通过懒加载可以直接减少 http 请求，减少不需要在首屏展示的非关键性信息占用了页面加载时间</p><p>构建优化: 结合主流的构建工具 webpack，可以合并资源，压缩资源等减少 http 请求数量以及数据包体积</p><p>缓存优化: 避免重复请求</p><p>渲染优化: 是否存在不必要的重绘和回流</p></blockquote><h2 id="性能优化实例" tabindex="-1"><a class="header-anchor" href="#性能优化实例" aria-hidden="true">#</a> 性能优化实例</h2><h3 id="加载性能优化" tabindex="-1"><a class="header-anchor" href="#加载性能优化" aria-hidden="true">#</a> 加载性能优化</h3><ol><li>什么是首屏时间?</li></ol><p>浏览器显示第一屏页面所消耗的时间</p><ol start="2"><li>为什么要优化首屏时间</li></ol><p>过长的等待时间，会让用户变得烦躁，i更轻易跳出或者关闭这个网站</p><ol start="3"><li>怎么优化首屏时间？</li></ol><p>针对不是首屏的资源进行懒加载</p><ol start="4"><li>为什么一般都进行懒加载?</li></ol><p>资源文件较大，加载完既费时又费力，用户也不一定会浏览到全部页面内容</p><h3 id="构建优化" tabindex="-1"><a class="header-anchor" href="#构建优化" aria-hidden="true">#</a> 构建优化</h3><ul><li>资源压缩 - 体积变小所传输的时间响应就会变少, 代码压缩、图片压缩</li><li>资源合并 - 将请求的多条资源合并成少量的请求，从而减少 http 请求数量</li></ul><ol><li>压缩 JS -- 基于 webpack5</li></ol><ul><li>基于 ES6 推出了 Tree-shaking, 根据 import、export 的模块导入导出语法, 确定是否删除代码</li><li>配置 mode = production, 自动压缩</li><li>ES6 -&gt; terser-webpack-plugin 默认会开启多线程压缩来加速我们的构建压缩速度</li></ul><ol start="2"><li>压缩 CSS</li></ol><ul><li>压缩 CSS 之前需要导出到独立的 css 文件</li><li>为什么不需要使用 style-loader 嵌入到 html 里面？ <ul><li>HTML CSS 的资源是无法并行的加载的, 降低了页面的性能</li><li>HTML CSS 任意代码的变更都会导致缓存的失效</li></ul></li></ul><ol start="3"><li>资源合并</li></ol><ul><li><p>是否把所有的is资源都合并到一个is文件中比较好? 这样只需要发送个请求</p><ul><li>初始 js 过大, 会影响首页加载</li><li>无法有效的利用浏览器的缓存, 特别对于 npm 包变动较小的代码, 改了一点代码, 都会导致 npm 包缓存的失效</li><li>http 2.0 复用 tcp 连接, 并行发送多个请求, 请求之间高度独立, 解决了 http1.0、1.1 请求之间阻塞的问题</li><li>所以, 实际开发中是不会把所有 js 合并到一个文件中</li></ul></li><li><p>生产环境中 - 实践原则</p><ul><li>针对 node_modules 资源 <ul><li>将 <code>node_modules</code> 模块打包成单独文件</li><li>配置 <code>maxSize</code> 设定阈值, 防止 <code>vendor</code> 包过大</li></ul></li><li>针对业务代码 <ul><li>设置 <code>common</code> 分组, 通过 <code>minChunks</code>配置项使用率较高的资源合并为 <code>Common</code> 资源</li><li>对于可以懒加载的资源, 可以通过异步方式引入</li></ul></li></ul></li><li><p>使用打包结果可视化工具 (webpack bundle analyzer)</p><ul><li>Bundle 包所包含的模块内容 -&gt; 推断产物是否包含预期之外的模块</li><li>确定模块体积大小与占比 -&gt; 从而确定是否还存在优化空间</li></ul></li></ul><h2 id="渲染优化" tabindex="-1"><a class="header-anchor" href="#渲染优化" aria-hidden="true">#</a> 渲染优化</h2><p>浏览器获取到资源之后进行渲染部分的相关性能优化</p><ol><li>浏览器渲染 ”黑盒“</li></ol><figure><img src="'+n+'" alt="image-20230410002232120" tabindex="0" loading="lazy"><figcaption>image-20230410002232120</figcaption></figure><p><strong>因为 dom 节点之间会相互关联，如果修改其中某一个 dom 节点的几何属性，其他元素的几何属性以及位置同样会受到相关的影响，这样就会发生重排</strong></p><figure><img src="'+s+'" alt="image-20230410002322457" tabindex="0" loading="lazy"><figcaption>image-20230410002322457</figcaption></figure><p><strong>当我们对 DOM 的修改导致了样式的变化，类似于 颜色、背景色字体这些，这样的改变，浏览器就不需要重新计算元素的几何属性也就少了重新布局这一步骤了</strong></p><figure><img src="'+d+'" alt="image-20230410002415130" tabindex="0" loading="lazy"><figcaption>image-20230410002415130</figcaption></figure><h3 id="渲染性能-减少重排的操作" tabindex="-1"><a class="header-anchor" href="#渲染性能-减少重排的操作" aria-hidden="true">#</a> 渲染性能 - 减少重排的操作</h3><p>很简单相比较重绘，<strong>重排更加消耗性能</strong>，我们需要减少重排的操作</p><ul><li>DOM 元素几何属性的修改，例如 width、height、padding、margin、left、top 等</li><li>修改 dom 树的结构，增加删除移动 dom 节点</li><li>获取特定的属性值，例如 offsetTop、 scrollTop、clientWidth、clientHeight 等</li></ul><h3 id="渲染性能-避免样式频繁修改" tabindex="-1"><a class="header-anchor" href="#渲染性能-避免样式频繁修改" aria-hidden="true">#</a> 渲染性能 - 避免样式频繁修改</h3><figure><img src="'+p+'" alt="image-20230410002843469" tabindex="0" loading="lazy"><figcaption>image-20230410002843469</figcaption></figure><h3 id="渲染性能-动画优化" tabindex="-1"><a class="header-anchor" href="#渲染性能-动画优化" aria-hidden="true">#</a> 渲染性能 - 动画优化</h3><figure><img src="'+h+'" alt="image-20230410003036179" tabindex="0" loading="lazy"><figcaption>image-20230410003036179</figcaption></figure><p><strong>一般动画为什么会设置16.6ms?</strong></p><ul><li>屏慕的刷新频率为60Hz，也就是1s内刷新的帧数，通过换算1000ms / 60 = 16.6ms也就是 16.6ms 刷新一次</li><li>但是不同设备的刷新频率可能有所不同, 一直使用 16.6ms 刷新一次, 会导致动画的随机丢帧</li></ul><p><strong>定时器做动画还会有哪些问题?</strong></p><ul><li>可能会造成动画的卡顿</li><li>因为 浏览器的 Eevent Loop 机制, 先去执行主进程, 再执行异步任务队列, 如果主线程同步任务过长, 会导致定时器执行比预定的时间要晚一些</li></ul><p><strong>引入 window 中的 requestAnimationFrame 方案</strong></p><ul><li>requestAnimationFrame 回调函数的执行机制, 是完全交由系统的刷新频率来决定的, 能保证回调函数在屏幕的刷新间隔都会调用一次, 避免了随机丢帧造成的卡顿现象</li><li>节省了 CPU 的开销, 当浏览器页面被隐藏 或 最小化之后, requestAnimationFrame 回调任务就会被暂停, 定时器需要主动的关闭</li></ul><p><strong>节流 &amp; 防抖</strong></p><p>节流防抖, 本身就是用于控制事件频率进行的优化</p><p><strong>本质</strong>: 两者并不会减少事件的触发，而是减少事件触发时回调函数的执行次数</p><figure><img src="'+g+'" alt="image-20230410004217256" tabindex="0" loading="lazy"><figcaption>image-20230410004217256</figcaption></figure><p>节流: 顾名思义，就是将短时间的函数调用以一个固定的频率间隔执行 (图片资源懒加载)</p><p>防抖：抖动现象本质就是指短时间内高频次触发。因此，我们可以把短时间内的多个连续调用合并成一次，也就是只触发一次回调函数。</p><p>(模糊搜索, 输入搜索 改为 按下确认键触发)</p><p><strong>Web Worker</strong></p><ul><li>多计算的场景, 可使用 Web Worker 进行计算, 再将计算结果传回主进程</li></ul><h2 id="缓存性能优化" tabindex="-1"><a class="header-anchor" href="#缓存性能优化" aria-hidden="true">#</a> 缓存性能优化</h2><h3 id="http缓存优化关注点" tabindex="-1"><a class="header-anchor" href="#http缓存优化关注点" aria-hidden="true">#</a> http缓存优化关注点</h3><p>缓存技术主要是针对重复请求的处理，是对已经获取资源的重用，提升网站性能和用户体验</p><h3 id="浏览器缓存-强缓存" tabindex="-1"><a class="header-anchor" href="#浏览器缓存-强缓存" aria-hidden="true">#</a> 浏览器缓存 - 强缓存</h3><p>在再次请求的时候进行 缓存字段的检查，如果没有过期，直接从<code>浏览器本地缓存</code>中返回资源</p><figure><img src="'+c+'" alt="image-20230410005142158" tabindex="0" loading="lazy"><figcaption>image-20230410005142158</figcaption></figure><h3 id="浏览器缓存-协商缓存" tabindex="-1"><a class="header-anchor" href="#浏览器缓存-协商缓存" aria-hidden="true">#</a> 浏览器缓存 - 协商缓存</h3><p>在浏览器使用本地的缓存之前，<code>向服务器发送请求</code>，判断一下浏览器<code>本地的缓存是否过期</code></p>',84),f=[m];function _(b,x){return a(),e("div",null,f)}const v=i(u,[["render",_],["__file","性能优化.html.vue"]]);export{v as default};

import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as t,c as p,a,b as e,d,e as n}from"./app-8ab60714.js";const i={},r=n('<h1 id="前端编写规范" tabindex="-1"><a class="header-anchor" href="#前端编写规范" aria-hidden="true">#</a> 前端编写规范</h1><h2 id="文件名-规范" tabindex="-1"><a class="header-anchor" href="#文件名-规范" aria-hidden="true">#</a> 文件名 规范</h2><p>js 文件名 采用驼峰写法 首字母小写</p><p><code>axios.js</code></p><p>Vue 文件名 采用驼峰写法 首字母大写</p><p><code>Login.vue</code></p><h2 id="关于变量声明" tabindex="-1"><a class="header-anchor" href="#关于变量声明" aria-hidden="true">#</a> 关于变量声明</h2><p>不管是在 TypeScript, 还是 JavaScript 应尽量避免使用 <code>var</code>, 而应该去使用 <code>const</code>、<code>let</code></p><p>因为使用 <code>var</code> 容易造成全局变量污染</p><p>私有变量, 以 <code>_</code> 开头结尾, 如: <code>_name_</code></p><h2 id="html-语义化" tabindex="-1"><a class="header-anchor" href="#html-语义化" aria-hidden="true">#</a> HTML 语义化</h2><ul><li>需要 SEO 页面再用 H5 的语义化标签</li><li>工作中, 通常 div + css 即可</li></ul>',12),l={href:"https://juejin.cn/post/6844903544995184653",target:"_blank",rel:"noopener noreferrer"},u=n(`<h2 id="css-选择器名称" tabindex="-1"><a class="header-anchor" href="#css-选择器名称" aria-hidden="true">#</a> CSS 选择器名称</h2><p>css 选择器名称 采用加 <code>-</code> 写法</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.icon-font</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高内聚、低耦合" tabindex="-1"><a class="header-anchor" href="#高内聚、低耦合" aria-hidden="true">#</a> 高内聚、低耦合</h2><p><strong>高内聚</strong></p><p>公共相关的东西应该放在同一个模块(集合)中</p><p><strong>低耦合</strong></p><p>不同模块(集合)应该独立的, 这就低耦合</p><h2 id="代码规范插件" tabindex="-1"><a class="header-anchor" href="#代码规范插件" aria-hidden="true">#</a> 代码规范插件</h2><p>VSCode 代码格式化工具 <code>Prettier</code></p><h2 id="什么时候用-或" tabindex="-1"><a class="header-anchor" href="#什么时候用-或" aria-hidden="true">#</a> 什么时候用 == 或 ===</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 除了 == null 之外, 其他都一律用 ===, 例如:</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token comment">// 相当于:</span>
<span class="token comment">// if ( obj.a === null || onj.a === undefined ) { }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于代码规范的问题" tabindex="-1"><a class="header-anchor" href="#关于代码规范的问题" aria-hidden="true">#</a> 关于代码规范的问题</h2><p>有的写 <code>xxx-xxx</code>，有的用驼峰写法 <code>xxxFfff</code></p><p>像我们使用的 <code>element-ui</code> 就是 <code>css</code> 命名，就是使用了 <code>BEM</code> 架构的去命名的</p><p>像什么变量命名啊、注释、写法等这个规定都是主观的，有时写着写着就忘了，容易受情绪的支配，对吧</p><p>最简单的，我们前端的 css 类名的命名</p><p>那么要如何去实现这个规范呢？</p><p>通过 工具、流程 这种客观的进行规范</p>`,19);function h(m,v){const s=o("ExternalLinkIcon");return t(),p("div",null,[r,a("p",null,[e("相关文章链接: "),a("a",l,[e("html5语义化标签 - 掘金 (juejin.cn)"),d(s)])]),u])}const _=c(i,[["render",h],["__file","前端编写规范.html.vue"]]);export{_ as default};

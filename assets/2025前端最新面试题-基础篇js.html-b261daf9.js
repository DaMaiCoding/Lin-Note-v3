const l=JSON.parse('{"key":"v-713d4622","path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/2025%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98/2025%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9F%BA%E7%A1%80%E7%AF%87js.html","title":"javaScript-系统知识点","lang":"zh-CN","frontmatter":{"description":"javaScript-系统知识点 值类型 和 引用类型 1. typeof 能判断哪些类型 undefined、string、number、boolean、Symbol(ES6) object、arrary、null、function 2. 何时使用 === 何时使用 == 除了 判断等于 null 或者 undefined 使用 == 以外, 都使用 === 3. 值类型和引用类型的区别 场景题 (结果是什么?)","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/DaMaiCoding-Note/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/2025%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98/2025%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9F%BA%E7%A1%80%E7%AF%87js.html"}],["meta",{"property":"og:site_name","content":"DaMaiCoding-Note"}],["meta",{"property":"og:title","content":"javaScript-系统知识点"}],["meta",{"property":"og:description","content":"javaScript-系统知识点 值类型 和 引用类型 1. typeof 能判断哪些类型 undefined、string、number、boolean、Symbol(ES6) object、arrary、null、function 2. 何时使用 === 何时使用 == 除了 判断等于 null 或者 undefined 使用 == 以外, 都使用 === 3. 值类型和引用类型的区别 场景题 (结果是什么?)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/DaMaiCoding-Note/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-20T10:06:50.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"javaScript-系统知识点"}],["meta",{"property":"article:modified_time","content":"2025-02-20T10:06:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javaScript-系统知识点\\",\\"image\\":[\\"https://mister-hope.github.io/DaMaiCoding-Note/\\"],\\"dateModified\\":\\"2025-02-20T10:06:50.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"值类型 和 引用类型","slug":"值类型-和-引用类型","link":"#值类型-和-引用类型","children":[{"level":3,"title":"1. typeof 能判断哪些类型","slug":"_1-typeof-能判断哪些类型","link":"#_1-typeof-能判断哪些类型","children":[]},{"level":3,"title":"2. 何时使用 === 何时使用 ==","slug":"_2-何时使用-何时使用","link":"#_2-何时使用-何时使用","children":[]},{"level":3,"title":"3. 值类型和引用类型的区别","slug":"_3-值类型和引用类型的区别","link":"#_3-值类型和引用类型的区别","children":[]},{"level":3,"title":"4. 手写深拷贝","slug":"_4-手写深拷贝","link":"#_4-手写深拷贝","children":[]},{"level":3,"title":"4.1 赋值、深拷贝、浅拷贝","slug":"_4-1-赋值、深拷贝、浅拷贝","link":"#_4-1-赋值、深拷贝、浅拷贝","children":[]},{"level":3,"title":"5. undefined 的三种情况（初级）","slug":"_5-undefined-的三种情况-初级","link":"#_5-undefined-的三种情况-初级","children":[]},{"level":3,"title":"6. instanceof 和 typeof 的区别","slug":"_6-instanceof-和-typeof-的区别","link":"#_6-instanceof-和-typeof-的区别","children":[]},{"level":3,"title":"7. var 和 let const 的区别?","slug":"_7-var-和-let-const-的区别","link":"#_7-var-和-let-const-的区别","children":[]},{"level":3,"title":"8. 列举强制类型转换和隐式转换","slug":"_8-列举强制类型转换和隐式转换","link":"#_8-列举强制类型转换和隐式转换","children":[]},{"level":3,"title":"9. const 定义对象里面的属性值能不能改变?","slug":"_9-const-定义对象里面的属性值能不能改变","link":"#_9-const-定义对象里面的属性值能不能改变","children":[]},{"level":3,"title":"10. JavaScript 有哪几种方法判断变量的类型?","slug":"_10-javascript-有哪几种方法判断变量的类型","link":"#_10-javascript-有哪几种方法判断变量的类型","children":[]}]},{"level":2,"title":"原型 和 原型链","slug":"原型-和-原型链","link":"#原型-和-原型链","children":[{"level":3,"title":"1. 什么是原型？什么是原型链？","slug":"_1-什么是原型-什么是原型链","link":"#_1-什么是原型-什么是原型链","children":[]},{"level":3,"title":"2. 如何准确判断一个变量是不是数组？","slug":"_2-如何准确判断一个变量是不是数组","link":"#_2-如何准确判断一个变量是不是数组","children":[]},{"level":3,"title":"3. class 的原型本质, 怎么理解？","slug":"_3-class-的原型本质-怎么理解","link":"#_3-class-的原型本质-怎么理解","children":[]},{"level":3,"title":"4. new Object() 和 Object.create() 的区别","slug":"_4-new-object-和-object-create-的区别","link":"#_4-new-object-和-object-create-的区别","children":[]},{"level":3,"title":"5. 如何用 JS 实现继承？","slug":"_5-如何用-js-实现继承","link":"#_5-如何用-js-实现继承","children":[]}]},{"level":2,"title":"作用域 和 闭包","slug":"作用域-和-闭包","link":"#作用域-和-闭包","children":[{"level":3,"title":"1. this 的不同应用场景, 如何取值?","slug":"_1-this-的不同应用场景-如何取值","link":"#_1-this-的不同应用场景-如何取值","children":[]},{"level":3,"title":"2. 手写 bind 函数","slug":"_2-手写-bind-函数","link":"#_2-手写-bind-函数","children":[]},{"level":3,"title":"3. 实际开发中闭包的应用场景, 举例说明","slug":"_3-实际开发中闭包的应用场景-举例说明","link":"#_3-实际开发中闭包的应用场景-举例说明","children":[]},{"level":3,"title":"4. 读代码","slug":"_4-读代码","link":"#_4-读代码","children":[]},{"level":3,"title":"5. 防抖、节流","slug":"_5-防抖、节流","link":"#_5-防抖、节流","children":[]},{"level":3,"title":"6. 闭包中变量如何释放？","slug":"_6-闭包中变量如何释放","link":"#_6-闭包中变量如何释放","children":[]},{"level":3,"title":"7. 闭包是什么, 有什么特征? 有什么负面影响？","slug":"_7-闭包是什么-有什么特征-有什么负面影响","link":"#_7-闭包是什么-有什么特征-有什么负面影响","children":[]}]},{"level":2,"title":"同步 和 异步","slug":"同步-和-异步","link":"#同步-和-异步","children":[{"level":3,"title":"1. 同步和异步的区别？","slug":"_1-同步和异步的区别","link":"#_1-同步和异步的区别","children":[]},{"level":3,"title":"1.1 什么是同步、异步?","slug":"_1-1-什么是同步、异步","link":"#_1-1-什么是同步、异步","children":[]},{"level":3,"title":"1.2 为什么会有异步？","slug":"_1-2-为什么会有异步","link":"#_1-2-为什么会有异步","children":[]},{"level":3,"title":"1.3 如何 异步 解决 JS 单线程阻塞问题？","slug":"_1-3-如何-异步-解决-js-单线程阻塞问题","link":"#_1-3-如何-异步-解决-js-单线程阻塞问题","children":[]},{"level":3,"title":"1.4 JS 如何实现异步?","slug":"_1-4-js-如何实现异步","link":"#_1-4-js-如何实现异步","children":[]},{"level":3,"title":"2. 手写用 Promise 加载一张图片","slug":"_2-手写用-promise-加载一张图片","link":"#_2-手写用-promise-加载一张图片","children":[]},{"level":3,"title":"3. 前端使用异步的场景有哪些？","slug":"_3-前端使用异步的场景有哪些","link":"#_3-前端使用异步的场景有哪些","children":[]},{"level":3,"title":"4. 读代码","slug":"_4-读代码-1","link":"#_4-读代码-1","children":[]},{"level":3,"title":"5. Promise","slug":"_5-promise","link":"#_5-promise","children":[]},{"level":3,"title":"5.1 两个异步请求如何合并?","slug":"_5-1-两个异步请求如何合并","link":"#_5-1-两个异步请求如何合并","children":[]},{"level":3,"title":"5.2 Promise有哪几种状态，各个状态之间是如何进行转换的？","slug":"_5-2-promise有哪几种状态-各个状态之间是如何进行转换的","link":"#_5-2-promise有哪几种状态-各个状态之间是如何进行转换的","children":[]},{"level":3,"title":"5.3 Promise 解决哪些问题?","slug":"_5-3-promise-解决哪些问题","link":"#_5-3-promise-解决哪些问题","children":[]},{"level":3,"title":"5.4 Promise.all、Promise.any、Promise.race、Promise.allsettled","slug":"_5-4-promise-all、promise-any、promise-race、promise-allsettled","link":"#_5-4-promise-all、promise-any、promise-race、promise-allsettled","children":[]},{"level":3,"title":"6. async await","slug":"_6-async-await","link":"#_6-async-await","children":[]},{"level":3,"title":"6.1 async/await 解决了什么问题?","slug":"_6-1-async-await-解决了什么问题","link":"#_6-1-async-await-解决了什么问题","children":[]},{"level":3,"title":"7. 事件循环","slug":"_7-事件循环","link":"#_7-事件循环","children":[]}]},{"level":2,"title":"数组、对象、函数、字符串、数字","slug":"数组、对象、函数、字符串、数字","link":"#数组、对象、函数、字符串、数字","children":[{"level":3,"title":"1. 数组 操作 API","slug":"_1-数组-操作-api","link":"#_1-数组-操作-api","children":[]},{"level":3,"title":"2. sort() 方法","slug":"_2-sort-方法","link":"#_2-sort-方法","children":[]},{"level":3,"title":"4. 深浅拷贝","slug":"_4-深浅拷贝","link":"#_4-深浅拷贝","children":[]},{"level":3,"title":"5. 数组的降维、升维？","slug":"_5-数组的降维、升维","link":"#_5-数组的降维、升维","children":[]},{"level":3,"title":"6. 字符串的常见方法？","slug":"_6-字符串的常见方法","link":"#_6-字符串的常见方法","children":[]},{"level":3,"title":"7. 数组的一些常见方法？","slug":"_7-数组的一些常见方法","link":"#_7-数组的一些常见方法","children":[]},{"level":3,"title":"8. Map、Set、Object Array 的区别？","slug":"_8-map、set、object-array-的区别","link":"#_8-map、set、object-array-的区别","children":[]},{"level":3,"title":"9. 截取数组的办法？","slug":"_9-截取数组的办法","link":"#_9-截取数组的办法","children":[]},{"level":3,"title":"10. 手写深度比较, 模拟 lodash isEqual","slug":"_10-手写深度比较-模拟-lodash-isequal","link":"#_10-手写深度比较-模拟-lodash-isequal","children":[]},{"level":3,"title":"11. split() 和 join() 的区别","slug":"_11-split-和-join-的区别","link":"#_11-split-和-join-的区别","children":[]},{"level":3,"title":"12. 数组哪些 API, 是纯函数","slug":"_12-数组哪些-api-是纯函数","link":"#_12-数组哪些-api-是纯函数","children":[]},{"level":3,"title":"13. 数组 slice 和 splice 的区别？","slug":"_13-数组-slice-和-splice-的区别","link":"#_13-数组-slice-和-splice-的区别","children":[]},{"level":3,"title":"14. 函数表达式 VS 函数声明（扩展）","slug":"_14-函数表达式-vs-函数声明-扩展","link":"#_14-函数表达式-vs-函数声明-扩展","children":[]},{"level":3,"title":"15. call、apply、bind的区别？","slug":"_15-call、apply、bind的区别","link":"#_15-call、apply、bind的区别","children":[]},{"level":3,"title":"16. 数组拍平 (多维数组变一维)","slug":"_16-数组拍平-多维数组变一维","link":"#_16-数组拍平-多维数组变一维","children":[]},{"level":3,"title":"17. 数组去重","slug":"_17-数组去重","link":"#_17-数组去重","children":[]},{"level":3,"title":"18. 操作字符串有哪些 API?","slug":"_18-操作字符串有哪些-api","link":"#_18-操作字符串有哪些-api","children":[]},{"level":3,"title":"19. 对比两个数组是否相等?","slug":"_19-对比两个数组是否相等","link":"#_19-对比两个数组是否相等","children":[]},{"level":3,"title":"20. new函数() 和 普通函数() 的区别","slug":"_20-new函数-和-普通函数-的区别","link":"#_20-new函数-和-普通函数-的区别","children":[]},{"level":3,"title":"20.1 new 的过程？","slug":"_20-1-new-的过程","link":"#_20-1-new-的过程","children":[]},{"level":3,"title":"21. 获取对象 key 的方法，及区别","slug":"_21-获取对象-key-的方法-及区别","link":"#_21-获取对象-key-的方法-及区别","children":[]},{"level":3,"title":"22. Number 的操作方法有哪些？","slug":"_22-number-的操作方法有哪些","link":"#_22-number-的操作方法有哪些","children":[]},{"level":3,"title":"23. JS 操作数组有哪些 API?","slug":"_23-js-操作数组有哪些-api","link":"#_23-js-操作数组有哪些-api","children":[]},{"level":3,"title":"24. JS 操作对象有哪些 API?","slug":"_24-js-操作对象有哪些-api","link":"#_24-js-操作对象有哪些-api","children":[]},{"level":3,"title":"25. JS 操作字符串有哪些 API?","slug":"_25-js-操作字符串有哪些-api","link":"#_25-js-操作字符串有哪些-api","children":[]},{"level":3,"title":"26. 深度优先遍历可以不用递归吗","slug":"_26-深度优先遍历可以不用递归吗","link":"#_26-深度优先遍历可以不用递归吗","children":[]}]},{"level":2,"title":"DOM❌️","slug":"dom❌️","link":"#dom❌️","children":[{"level":3,"title":"1. DOM 是哪种数据结构","slug":"_1-dom-是哪种数据结构","link":"#_1-dom-是哪种数据结构","children":[]},{"level":3,"title":"2. DOM 操作的常用 API","slug":"_2-dom-操作的常用-api","link":"#_2-dom-操作的常用-api","children":[]},{"level":3,"title":"3. attr 和 property 的区别","slug":"_3-attr-和-property-的区别","link":"#_3-attr-和-property-的区别","children":[]},{"level":3,"title":"4. 一次性插入多个 DOM 节点, 考虑性能","slug":"_4-一次性插入多个-dom-节点-考虑性能","link":"#_4-一次性插入多个-dom-节点-考虑性能","children":[]}]},{"level":2,"title":"BOM❌️","slug":"bom❌️","link":"#bom❌️","children":[{"level":3,"title":"1. 如何识别浏览器的类型","slug":"_1-如何识别浏览器的类型","link":"#_1-如何识别浏览器的类型","children":[]},{"level":3,"title":"2. 分析拆解 url 各个部分","slug":"_2-分析拆解-url-各个部分","link":"#_2-分析拆解-url-各个部分","children":[]}]},{"level":2,"title":"事件绑定❌️","slug":"事件绑定❌️","link":"#事件绑定❌️","children":[{"level":3,"title":"1. 编写一个通用的事件监听函数","slug":"_1-编写一个通用的事件监听函数","link":"#_1-编写一个通用的事件监听函数","children":[]},{"level":3,"title":"2. 描述事件冒泡的流程","slug":"_2-描述事件冒泡的流程","link":"#_2-描述事件冒泡的流程","children":[]},{"level":3,"title":"3. 无限下拉的图片列表, 如何监听每个图片的点击？","slug":"_3-无限下拉的图片列表-如何监听每个图片的点击","link":"#_3-无限下拉的图片列表-如何监听每个图片的点击","children":[]}]},{"level":2,"title":"存储","slug":"存储","link":"#存储","children":[{"level":3,"title":"1. cookie localStorage sessionStorage 区别","slug":"_1-cookie-localstorage-sessionstorage-区别","link":"#_1-cookie-localstorage-sessionstorage-区别","children":[]},{"level":3,"title":"2. 描述 cookie localStorage sessionStorage 区别","slug":"_2-描述-cookie-localstorage-sessionstorage-区别","link":"#_2-描述-cookie-localstorage-sessionstorage-区别","children":[]}]},{"level":2,"title":"ES6 操作对象相关的新语法","slug":"es6-操作对象相关的新语法","link":"#es6-操作对象相关的新语法","children":[]},{"level":2,"title":"ES6 有哪些新东西","slug":"es6-有哪些新东西","link":"#es6-有哪些新东西","children":[]},{"level":2,"title":"箭头函数函数 与 普通函数的区别？","slug":"箭头函数函数-与-普通函数的区别","link":"#箭头函数函数-与-普通函数的区别","children":[]},{"level":2,"title":"ES6中 Set 和 Map 的区别","slug":"es6中-set-和-map-的区别","link":"#es6中-set-和-map-的区别","children":[]},{"level":2,"title":"会造成内存泄漏的情况（中级）","slug":"会造成内存泄漏的情况-中级","link":"#会造成内存泄漏的情况-中级","children":[]},{"level":2,"title":"如何捕获 JS 程序的异常？","slug":"如何捕获-js-程序的异常","link":"#如何捕获-js-程序的异常","children":[]},{"level":2,"title":"如何获取当前页面 url 参数","slug":"如何获取当前页面-url-参数","link":"#如何获取当前页面-url-参数","children":[]},{"level":2,"title":"ES6的模块 与 CommonJS的模块 的异同","slug":"es6的模块-与-commonjs的模块-的异同","link":"#es6的模块-与-commonjs的模块-的异同","children":[]},{"level":2,"title":"JS 内存垃圾回收用什么算法","slug":"js-内存垃圾回收用什么算法","link":"#js-内存垃圾回收用什么算法","children":[]},{"level":2,"title":"JS 内存泄漏如何检测？场景有哪些？","slug":"js-内存泄漏如何检测-场景有哪些","link":"#js-内存泄漏如何检测-场景有哪些","children":[]},{"level":2,"title":"浏览器 和 node.js 的 event loop 有什么区别？","slug":"浏览器-和-node-js-的-event-loop-有什么区别","link":"#浏览器-和-node-js-的-event-loop-有什么区别","children":[]},{"level":2,"title":"vdom 真的很快吗？","slug":"vdom-真的很快吗","link":"#vdom-真的很快吗","children":[]},{"level":2,"title":"遍历一个数组用 for 和 forEach 哪个更快？","slug":"遍历一个数组用-for-和-foreach-哪个更快","link":"#遍历一个数组用-for-和-foreach-哪个更快","children":[]},{"level":2,"title":"","slug":"","link":"#","children":[]}],"git":{"createdTime":1740046010000,"updatedTime":1740046010000,"contributors":[{"name":"linzeqin","email":"1351123861@qq.com","commits":1}]},"readingTime":{"minutes":69.16,"words":20748},"filePathRelative":"前端面试题/2025前端最新面试题/2025前端最新面试题-基础篇js.md","localizedDate":"2025年2月20日","excerpt":"<h1> javaScript-系统知识点</h1>\\n<h2> 值类型 和 引用类型</h2>\\n<h3> 1. typeof 能判断哪些类型</h3>\\n<p>undefined、string、number、boolean、Symbol(ES6)</p>\\n<p>object、arrary、null、function</p>\\n<h3> 2. 何时使用 === 何时使用 ==</h3>\\n<p>除了 判断等于 null 或者 undefined 使用 == 以外, 都使用 ===</p>\\n<h3> 3. 值类型和引用类型的区别</h3>\\n<p><strong>场景题 (结果是什么?)</strong></p>","autoDesc":true}');export{l as data};
